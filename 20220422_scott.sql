--------------------------------------------------------
--  파일이 생성됨 - 금요일-4월-22-2022   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence BUSEOSEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SCOTT"."BUSEOSEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CITYSEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SCOTT"."CITYSEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 13 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence EMPSEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SCOTT"."EMPSEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1065 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence JIKWISEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SCOTT"."JIKWISEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MEMBERSEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SCOTT"."MEMBERSEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SCORESEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SCOTT"."SCORESEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 14 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_BOARD
--------------------------------------------------------

   CREATE SEQUENCE  "SCOTT"."SEQ_BOARD"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table BONUS
--------------------------------------------------------

  CREATE TABLE "SCOTT"."BONUS" 
   (	"ENAME" VARCHAR2(10 BYTE), 
	"JOB" VARCHAR2(9 BYTE), 
	"SAL" NUMBER, 
	"COMM" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DEPT
--------------------------------------------------------

  CREATE TABLE "SCOTT"."DEPT" 
   (	"DEPTNO" NUMBER(2,0), 
	"DNAME" VARCHAR2(14 BYTE), 
	"LOC" VARCHAR2(13 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EMP
--------------------------------------------------------

  CREATE TABLE "SCOTT"."EMP" 
   (	"EMPNO" NUMBER(4,0), 
	"ENAME" VARCHAR2(10 BYTE), 
	"JOB" VARCHAR2(9 BYTE), 
	"MGR" NUMBER(4,0), 
	"HIREDATE" DATE, 
	"SAL" NUMBER(7,2), 
	"COMM" NUMBER(7,2), 
	"DEPTNO" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SALGRADE
--------------------------------------------------------

  CREATE TABLE "SCOTT"."SALGRADE" 
   (	"GRADE" NUMBER, 
	"LOSAL" NUMBER, 
	"HISAL" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB1
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TAB1" 
   (	"COL1" NUMBER, 
	"COL2" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TAB2
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TAB2" 
   (	"V1" VARCHAR2(10 BYTE), 
	"V2" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_BOARD
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_BOARD" 
   (	"NUM" NUMBER(9,0), 
	"NAME" VARCHAR2(30 BYTE), 
	"PWD" VARCHAR2(20 BYTE), 
	"EMAIL" VARCHAR2(50 BYTE), 
	"SUBJECT" VARCHAR2(100 BYTE), 
	"CONTENT" VARCHAR2(4000 BYTE), 
	"IPADDR" VARCHAR2(20 BYTE), 
	"HITCOUNT" NUMBER DEFAULT 0, 
	"CREATED" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_BUSEO
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_BUSEO" 
   (	"BUSEO_ID" NUMBER(5,0), 
	"BUSEO_NAME" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_CITY
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_CITY" 
   (	"CITY_ID" NUMBER(5,0), 
	"CITY_NAME" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_DEPT
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_DEPT" 
   (	"DEPTNO" NUMBER(2,0), 
	"DNAME" VARCHAR2(14 BYTE), 
	"LOC" VARCHAR2(13 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "SCOTT"."TBL_DEPT"."DEPTNO" IS '부서 번호';
   COMMENT ON COLUMN "SCOTT"."TBL_DEPT"."DNAME" IS '부서명';
   COMMENT ON COLUMN "SCOTT"."TBL_DEPT"."LOC" IS '부서명';
   COMMENT ON TABLE "SCOTT"."TBL_DEPT"  IS '부서정보';
--------------------------------------------------------
--  DDL for Table TBL_EMP
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_EMP" 
   (	"EMP_ID" NUMBER(5,0), 
	"EMP_NAME" VARCHAR2(30 BYTE), 
	"SSN" CHAR(14 BYTE), 
	"IBSADATE" DATE, 
	"CITY_ID" NUMBER(5,0), 
	"TEL" VARCHAR2(20 BYTE), 
	"BUSEO_ID" NUMBER(5,0), 
	"JIKWI_ID" NUMBER(5,0), 
	"BASICPAY" NUMBER(10,0), 
	"SUDANG" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_EVENTLOG
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_EVENTLOG" 
   (	"MEMO" VARCHAR2(200 BYTE), 
	"ILJA" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_EXAMPLE1
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_EXAMPLE1" 
   (	"NO" NUMBER, 
	"NAME" VARCHAR2(10 BYTE), 
	"ADDR" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_EXAMPLE2
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_EXAMPLE2" 
   (	"NO" NUMBER, 
	"NAME" VARCHAR2(10 BYTE), 
	"ADDR" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TBS_EDUA" ;
--------------------------------------------------------
--  DDL for Table TBL_FILES
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_FILES" 
   (	"FILENO" NUMBER(3,0), 
	"FILENAME" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_IDPW
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_IDPW" 
   (	"ID" VARCHAR2(10 BYTE), 
	"PW" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_INSA
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_INSA" 
   (	"NUM" NUMBER(5,0), 
	"NAME" VARCHAR2(20 BYTE), 
	"SSN" VARCHAR2(14 BYTE), 
	"IBSADATE" DATE, 
	"CITY" VARCHAR2(10 BYTE), 
	"TEL" VARCHAR2(15 BYTE), 
	"BUSEO" VARCHAR2(15 BYTE), 
	"JIKWI" VARCHAR2(15 BYTE), 
	"BASICPAY" NUMBER(10,0), 
	"SUDANG" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_INSABACKUP
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_INSABACKUP" 
   (	"NUM" NUMBER(5,0), 
	"NAME" VARCHAR2(20 BYTE), 
	"SSN" VARCHAR2(14 BYTE), 
	"IBSADATE" DATE, 
	"CITY" VARCHAR2(10 BYTE), 
	"TEL" VARCHAR2(15 BYTE), 
	"BUSEO" VARCHAR2(15 BYTE), 
	"JIKWI" VARCHAR2(15 BYTE), 
	"BASICPAY" NUMBER(10,0), 
	"SUDANG" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_JIKWI
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_JIKWI" 
   (	"JIKWI_ID" NUMBER(5,0), 
	"JIKWI_NAME" VARCHAR2(20 BYTE), 
	"MIN_BASICPAY" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_JUMUN
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_JUMUN" 
   (	"JUNO" NUMBER, 
	"JECODE" VARCHAR2(30 BYTE), 
	"JUSU" NUMBER, 
	"JUDAY" DATE DEFAULT SYSDATE    -- 주문 일자

  
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_JUMUNBACKUP
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_JUMUNBACKUP" 
   (	"JUNO" NUMBER, 
	"JECODE" VARCHAR2(30 BYTE), 
	"JUSU" NUMBER, 
	"JUDAY" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_MEMBER
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_MEMBER" 
   (	"SID" NUMBER, 
	"NAME" VARCHAR2(30 BYTE), 
	"TEL" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_MEMBERSCORE
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_MEMBERSCORE" 
   (	"SID" NUMBER, 
	"KOR" NUMBER(3,0), 
	"ENG" NUMBER(3,0), 
	"MAT" NUMBER(3,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_SAWON
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_SAWON" 
   (	"SANO" NUMBER(4,0), 
	"SANAME" VARCHAR2(30 BYTE), 
	"JUBUN" CHAR(13 BYTE), 
	"HIREDATE" DATE DEFAULT SYSDATE, 
	"SAL" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_SAWONBACKUP
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_SAWONBACKUP" 
   (	"SANO" NUMBER(4,0), 
	"SANAME" VARCHAR2(30 BYTE), 
	"JUBUN" CHAR(13 BYTE), 
	"HIREDATE" DATE, 
	"SAL" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_STUDENTS
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_STUDENTS" 
   (	"ID" VARCHAR2(10 BYTE), 
	"NAME" VARCHAR2(40 BYTE), 
	"TEL" VARCHAR2(30 BYTE), 
	"ADDR" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_SUNGJUK
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_SUNGJUK" 
   (	"HAKBUN" NUMBER, 
	"NAME" VARCHAR2(40 BYTE), 
	"KOR" NUMBER(3,0), 
	"ENG" NUMBER(3,0), 
	"MAT" NUMBER(3,0), 
	"TOT" NUMBER(3,0), 
	"AVG" NUMBER(4,1), 
	"GRADE" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_TEST1
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_TEST1" 
   (	"ID" NUMBER, 
	"NAME" VARCHAR2(30 BYTE), 
	"TEL" VARCHAR2(60 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_TEST2
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_TEST2" 
   (	"CODE" NUMBER, 
	"NAME" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_TEST3
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_TEST3" 
   (	"SID" NUMBER, 
	"CODE" NUMBER, 
	"SU" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_WATCH
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_WATCH" 
   (	"WATCH_NAME" VARCHAR2(20 BYTE), 
	"BIGO" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_상품
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_상품" 
   (	"상품코드" VARCHAR2(20 BYTE), 
	"상품명" VARCHAR2(100 BYTE), 
	"소비자가격" NUMBER, 
	"재고수량" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_입고
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_입고" 
   (	"입고번호" NUMBER, 
	"상품코드" VARCHAR2(100 BYTE), 
	"입고일자" DATE DEFAULT SYSDATE, 
	"입고수량" NUMBER, 
	"입고단가" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBL_출고
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TBL_출고" 
   (	"출고번호" NUMBER, 
	"상품코드" VARCHAR2(20 BYTE), 
	"출고일자" DATE DEFAULT SYSDATE, 
	"출고수량" NUMBER, 
	"출고단가" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TNL_JUMUNBACKUP
--------------------------------------------------------

  CREATE TABLE "SCOTT"."TNL_JUMUNBACKUP" 
   (	"JUNO" NUMBER, 
	"JECODE" VARCHAR2(30 BYTE), 
	"JUSU" NUMBER, 
	"JUDAY" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View EMPVIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SCOTT"."EMPVIEW" ("EMP_ID", "EMP_NAME", "SSN", "IBSADATE", "CITY_NAME", "TEL", "BUSEO_NAME", "JIKWI_NAME", "BASICPAY", "SUDANG", "PAY") AS 
  SELECT E.EMP_ID, E.EMP_NAME, E.SSN, TO_CHAR(E.IBSADATE, 'YYYY-MM-DD') AS IBSADATE
     , C.CITY_NAME, E.TEL, B.BUSEO_NAME, J.JIKWI_NAME, E.BASICPAY, E.SUDANG, (E.BASICPAY + E.SUDANG) AS PAY
FROM TBL_EMP E, TBL_CITY C, TBL_BUSEO B, TBL_JIKWI J
WHERE E.CITY_ID = C.CITY_ID
AND E.BUSEO_ID = B.BUSEO_ID
AND E.JIKWI_ID = J.JIKWI_ID
;
--------------------------------------------------------
--  DDL for View VIEW_BOARDLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SCOTT"."VIEW_BOARDLIST" ("글번호", "제목", "작성자", "작성일") AS 
  SELECT ROW_NUMBER() OVER(ORDER BY CREATED) "글번호"
, TITLE"제목", NAME"작성자", CREATED"작성일"
FROM TBL_BOARD
ORDER BY 4 DESC
;
--------------------------------------------------------
--  DDL for View VIEW_MEMBERSCORE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SCOTT"."VIEW_MEMBERSCORE" ("SID", "NAME", "TEL", "KOR", "ENG", "MAT") AS 
  SELECT M.SID, M.NAME, M.TEL
    , NVL(S.KOR,-1) AS KOR
    , NVL(S.ENG,-1) AS ENG
    , NVL(S.MAT,-1) AS MAT
FROM TBL_MEMBER M, TBL_MEMBERSCORE S
WHERE M.SID = S.SID(+)
;
--------------------------------------------------------
--  DDL for View VIEW_SAWON
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SCOTT"."VIEW_SAWON" ("사원번호", "사원명", "주민번호", "현재나이", "입사일", "성별", "정년퇴직일", "남은일수", "급여", "보너스") AS 
  SELECT T.사원번호, T.사원명, T.주민번호, T.현재나이, T.입사일, T.성별
  ,TO_CHAR(ADD_MONTHS(SYSDATE, (60-T.현재나이)*12),'YYYY')||'-'||TO_CHAR(T.입사일, 'MM-DD') "정년퇴직일"
  ,TRUNC(TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE, (60-T.현재나이)*12),'YYYY')||'-'||TO_CHAR(T.입사일, 'MM-DD') ,'YYYY-MM-DD') - SYSDATE) "남은일수"
  ,T.급여
  , CASE WHEN TRUNC(SYSDATE-T.입사일) >= 2000 THEN T.급여 * 0.5
         WHEN TRUNC(SYSDATE-T.입사일) >= 1000 THEN T.급여 * 0.3
         ELSE 0
         END "보너스"
FROM
(
    SELECT SANO"사원번호", SANAME"사원명", JUBUN"주민번호", SAL "급여"
    ,CASE WHEN SUBSTR(JUBUN,7,1) IN ('1','3') THEN '남자'
          WHEN SUBSTR(JUBUN,7,1) IN ('2','4') THEN '여자'
          ELSE '확인불가'
          END "성별"
    -- 현재나이 = 현재년도 - 태어난년도 + 1 (1900년대 / 2000년대)     
    ,CASE WHEN SUBSTR(JUBUN,7,1) IN ('1','2')
          THEN EXTRACT(YEAR FROM SYSDATE) - (TO_NUMBER(SUBSTR(JUBUN,1,2)) + 1899) --현재년도 - (주민번호앞두자리+1899) 
          WHEN SUBSTR(JUBUN,7,1) IN ('3','4')
          THEN EXTRACT(YEAR FROM SYSDATE) - (TO_NUMBER(SUBSTR(JUBUN,1,2)) + 1999) --현재년도 - (주민번호앞두자리+1999)
          ELSE -1
          END "현재나이"
    , HIREDATE "입사일"
    FROM TBL_SAWON
) T
;
--------------------------------------------------------
--  DDL for View VIEW_SAWON2
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SCOTT"."VIEW_SAWON2" ("사원명", "성별", "현재나이", "급여", "나이 보너스") AS 
  SELECT T.사원명, T.성별, T.현재나이, T.급여
, CASE WHEN T.현재나이 > 50 THEN T.급여 * 0.7
       WHEN T.현재나이 >= 40 THEN T.급여 * 0.5
       WHEN T.현재나이 >= 20 THEN T.급여 * 0.3
       ELSE 0
       END "나이 보너스"
FROM(
SELECT SANAME"사원명"
, CASE WHEN SUBSTR(JUBUN,7,1) IN ('1','3') THEN '남자'
       WHEN SUBSTR(JUBUN,7,1) IN ('2','4') THEN '여자'
       ELSE '알수없음'
       END "성별"
,CASE WHEN SUBSTR(JUBUN,7,1) IN ('1','2')
      THEN EXTRACT(YEAR FROM SYSDATE) - (TO_NUMBER(SUBSTR(JUBUN,1,2)) + 1899) --현재년도 - (주민번호앞두자리+1899) 
      WHEN SUBSTR(JUBUN,7,1) IN ('3','4')
      THEN EXTRACT(YEAR FROM SYSDATE) - (TO_NUMBER(SUBSTR(JUBUN,1,2)) + 1999) --현재년도 - (주민번호앞두자리+1999)
      ELSE -1
      END "현재나이" 
, SAL"급여"
FROM TBL_SAWON
) T
;
REM INSERTING into SCOTT.BONUS
SET DEFINE OFF;
REM INSERTING into SCOTT.DEPT
SET DEFINE OFF;
Insert into SCOTT.DEPT (DEPTNO,DNAME,LOC) values (10,'ACCOUNTING','NEW YORK');
Insert into SCOTT.DEPT (DEPTNO,DNAME,LOC) values (20,'RESEARCH','DALLAS');
Insert into SCOTT.DEPT (DEPTNO,DNAME,LOC) values (30,'SALES','CHICAGO');
Insert into SCOTT.DEPT (DEPTNO,DNAME,LOC) values (40,'OPERATIONS','BOSTON');
REM INSERTING into SCOTT.EMP
SET DEFINE OFF;
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7369,'SMITH','CLERK',7902,to_date('1980-12-17','YYYY-MM-DD'),800,null,20);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7499,'ALLEN','SALESMAN',7698,to_date('1981-02-20','YYYY-MM-DD'),1600,300,30);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7521,'WARD','SALESMAN',7698,to_date('1981-02-22','YYYY-MM-DD'),1250,500,30);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7566,'JONES','MANAGER',7839,to_date('1981-04-02','YYYY-MM-DD'),2975,null,20);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7654,'MARTIN','SALESMAN',7698,to_date('1981-09-28','YYYY-MM-DD'),1250,1400,30);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7698,'BLAKE','MANAGER',7839,to_date('1981-05-01','YYYY-MM-DD'),2850,null,30);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7782,'CLARK','MANAGER',7839,to_date('1981-06-09','YYYY-MM-DD'),2450,null,10);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7788,'SCOTT','ANALYST',7566,to_date('1987-07-13','YYYY-MM-DD'),3000,null,20);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7839,'KING','PRESIDENT',null,to_date('1981-11-17','YYYY-MM-DD'),5000,null,10);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7844,'TURNER','SALESMAN',7698,to_date('1981-09-08','YYYY-MM-DD'),1500,0,30);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7876,'ADAMS','CLERK',7788,to_date('1987-07-13','YYYY-MM-DD'),1100,null,20);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7900,'JAMES','CLERK',7698,to_date('1981-12-03','YYYY-MM-DD'),950,null,30);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7902,'FORD','ANALYST',7566,to_date('1981-12-03','YYYY-MM-DD'),3000,null,20);
Insert into SCOTT.EMP (EMPNO,ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO) values (7934,'MILLER','CLERK',7782,to_date('1982-01-23','YYYY-MM-DD'),1300,null,10);
REM INSERTING into SCOTT.SALGRADE
SET DEFINE OFF;
Insert into SCOTT.SALGRADE (GRADE,LOSAL,HISAL) values (1,700,1200);
Insert into SCOTT.SALGRADE (GRADE,LOSAL,HISAL) values (2,1201,1400);
Insert into SCOTT.SALGRADE (GRADE,LOSAL,HISAL) values (3,1401,2000);
Insert into SCOTT.SALGRADE (GRADE,LOSAL,HISAL) values (4,2001,3000);
Insert into SCOTT.SALGRADE (GRADE,LOSAL,HISAL) values (5,3001,9999);
REM INSERTING into SCOTT.TAB1
SET DEFINE OFF;
Insert into SCOTT.TAB1 (COL1,COL2) values (1,1);
Insert into SCOTT.TAB1 (COL1,COL2) values (2,2);
REM INSERTING into SCOTT.TAB2
SET DEFINE OFF;
REM INSERTING into SCOTT.TBL_BOARD
SET DEFINE OFF;
REM INSERTING into SCOTT.TBL_BUSEO
SET DEFINE OFF;
Insert into SCOTT.TBL_BUSEO (BUSEO_ID,BUSEO_NAME) values (1,'개발부');
Insert into SCOTT.TBL_BUSEO (BUSEO_ID,BUSEO_NAME) values (2,'기획부');
Insert into SCOTT.TBL_BUSEO (BUSEO_ID,BUSEO_NAME) values (3,'영업부');
Insert into SCOTT.TBL_BUSEO (BUSEO_ID,BUSEO_NAME) values (4,'인사부');
Insert into SCOTT.TBL_BUSEO (BUSEO_ID,BUSEO_NAME) values (5,'자재부');
Insert into SCOTT.TBL_BUSEO (BUSEO_ID,BUSEO_NAME) values (6,'총무부');
Insert into SCOTT.TBL_BUSEO (BUSEO_ID,BUSEO_NAME) values (7,'홍보부');
REM INSERTING into SCOTT.TBL_CITY
SET DEFINE OFF;
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (1,'강원');
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (2,'경기');
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (3,'경남');
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (4,'경북');
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (5,'부산');
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (6,'서울');
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (7,'인천');
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (8,'전남');
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (9,'전북');
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (10,'제주');
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (11,'충남');
Insert into SCOTT.TBL_CITY (CITY_ID,CITY_NAME) values (12,'충북');
REM INSERTING into SCOTT.TBL_DEPT
SET DEFINE OFF;
Insert into SCOTT.TBL_DEPT (DEPTNO,DNAME,LOC) values (10,'ACCOUNTING','NEW YORK');
Insert into SCOTT.TBL_DEPT (DEPTNO,DNAME,LOC) values (20,'RESEARCH','DALLAS');
Insert into SCOTT.TBL_DEPT (DEPTNO,DNAME,LOC) values (30,'SALES','CHICAGO');
Insert into SCOTT.TBL_DEPT (DEPTNO,DNAME,LOC) values (40,'OPERATIONS','BOSTON');
Insert into SCOTT.TBL_DEPT (DEPTNO,DNAME,LOC) values (50,'개발부','서울');
REM INSERTING into SCOTT.TBL_EMP
SET DEFINE OFF;
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1064,'이승배','641005-1350819',to_date('2022-03-28','YYYY-MM-DD'),12,'010-5557-0463',1,7,6000000,2000000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1062,'이호석','961112-1234567',to_date('2020-11-11','YYYY-MM-DD'),6,'010-9600-1715',1,8,5000000,2000000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1061,'이연주','950816-2351725',to_date('2022-03-04','YYYY-MM-DD'),12,'010-4423-0463',1,1,2000000,100000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1063,'김화용','121224-1380618',to_date('2021-03-25','YYYY-MM-DD'),2,'010-4423-0463',2,9,4000000,1000000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1001,'홍길동','771212-1022432',to_date('1998-10-11','YYYY-MM-DD'),6,'011-2356-4528',2,5,2610000,200000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1002,'이순신','801007-1544236',to_date('2000-11-29','YYYY-MM-DD'),2,'010-4758-6532',6,9,1320000,200000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1003,'이순애','770922-2312547',to_date('1999-02-25','YYYY-MM-DD'),7,'010-4231-1236',1,5,2550000,160000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1004,'김정훈','790304-1788896',to_date('2000-10-01','YYYY-MM-DD'),9,'019-5236-4221',3,8,1954200,170000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1005,'한석봉','811112-1566789',to_date('2004-08-13','YYYY-MM-DD'),6,'018-5211-3542',6,9,1420000,160000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1006,'이기자','780505-2978541',to_date('2002-02-11','YYYY-MM-DD'),7,'010-3214-5357',1,7,2265000,150000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1007,'장인철','780506-1625148',to_date('1998-03-16','YYYY-MM-DD'),10,'011-2345-2525',1,8,1250000,150000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1008,'김영년','821011-2362514',to_date('2002-04-30','YYYY-MM-DD'),6,'016-2222-4444',7,9,950000,145000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1009,'나윤균','810810-1552147',to_date('2003-10-10','YYYY-MM-DD'),2,'019-1111-2222',4,9,840000,220400);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1010,'김종서','751010-1122233',to_date('1997-08-08','YYYY-MM-DD'),5,'011-3214-5555',3,5,2540000,130000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1011,'유관순','801010-2987897',to_date('2000-07-07','YYYY-MM-DD'),6,'010-8888-4422',3,9,1020000,140000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1012,'정한국','760909-1333333',to_date('1999-10-16','YYYY-MM-DD'),1,'018-2222-4242',7,9,880000,114000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1013,'조미숙','790102-2777777',to_date('1998-06-07','YYYY-MM-DD'),2,'019-6666-4444',7,8,1601000,103000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1014,'황진이','810707-2574812',to_date('2002-02-15','YYYY-MM-DD'),7,'010-3214-5467',1,9,1100000,130000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1015,'이현숙','800606-2954687',to_date('1999-07-26','YYYY-MM-DD'),2,'016-2548-3365',6,9,1050000,104000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1016,'이상헌','781010-1666678',to_date('2001-11-29','YYYY-MM-DD'),2,'010-4526-1234',1,7,2350000,150000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1017,'엄용수','820507-1452365',to_date('2000-08-28','YYYY-MM-DD'),7,'010-3254-2542',1,9,950000,210000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1018,'이성길','801028-1849534',to_date('2004-08-08','YYYY-MM-DD'),9,'018-1333-3333',1,9,880000,123000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1019,'박문수','780710-1985632',to_date('1999-12-10','YYYY-MM-DD'),6,'017-4747-4848',4,7,2300000,165000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1020,'유영희','800304-2741258',to_date('2003-10-10','YYYY-MM-DD'),8,'011-9595-8585',5,9,880000,140000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1021,'홍길남','801010-1111111',to_date('2001-09-07','YYYY-MM-DD'),2,'011-9999-7575',1,9,875000,120000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1022,'이영숙','800501-2312456',to_date('2003-02-25','YYYY-MM-DD'),8,'017-5214-5282',2,8,1960000,180000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1023,'김인수','731211-1214576',to_date('1995-02-23','YYYY-MM-DD'),6,null,3,5,2500000,170000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1024,'김말자','830225-2633334',to_date('1999-08-28','YYYY-MM-DD'),6,'011-5248-7789',2,8,1900000,170000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1025,'우재옥','801103-1654442',to_date('2000-10-01','YYYY-MM-DD'),6,'010-4563-2587',3,9,1100000,160000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1026,'김숙남','810907-2015457',to_date('2002-08-28','YYYY-MM-DD'),2,'010-2112-5225',3,9,1050000,150000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1027,'김영길','801216-1898752',to_date('2000-10-18','YYYY-MM-DD'),6,'019-8523-1478',6,7,2340000,170000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1028,'이남신','810101-1010101',to_date('2001-09-07','YYYY-MM-DD'),10,'016-1818-4848',4,9,892000,110000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1029,'김말숙','800301-2020202',to_date('2000-09-08','YYYY-MM-DD'),6,'016-3535-3636',6,9,920000,124000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1030,'정정해','790210-2101010',to_date('1999-10-17','YYYY-MM-DD'),5,'019-6564-6752',6,7,2304000,124000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1031,'지재환','771115-1687988',to_date('2001-01-21','YYYY-MM-DD'),6,'019-5552-7511',2,5,2450000,160000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1032,'심심해','810206-2222222',to_date('2000-05-05','YYYY-MM-DD'),9,'016-8888-7474',5,9,880000,108000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1033,'김미나','780505-2999999',to_date('1998-06-07','YYYY-MM-DD'),6,'011-2444-4444',3,9,1020000,104000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1034,'이정석','820505-1325468',to_date('2005-09-26','YYYY-MM-DD'),2,'011-3697-7412',2,9,1100000,160000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1035,'정영희','831010-2153252',to_date('2002-05-16','YYYY-MM-DD'),7,null,1,9,1050000,140000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1036,'이재영','701126-2852147',to_date('2003-08-10','YYYY-MM-DD'),6,'011-9999-9999',5,9,960400,190000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1037,'최석규','770129-1456987',to_date('1998-10-15','YYYY-MM-DD'),7,'011-7777-7777',7,7,2350000,187000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1038,'손인수','791009-2321456',to_date('1999-11-15','YYYY-MM-DD'),5,'010-6542-7412',3,8,2000000,150000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1040,'박세열','790509-1635214',to_date('2000-09-10','YYYY-MM-DD'),4,'016-4444-7777',4,8,2100000,130000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1041,'문길수','721217-1951357',to_date('2001-12-10','YYYY-MM-DD'),11,'016-4444-5555',5,7,2300000,150000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1042,'채정희','810709-2000054',to_date('2003-10-17','YYYY-MM-DD'),2,'011-5125-5511',1,9,1020000,200000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1043,'양미옥','830504-2471523',to_date('2003-09-24','YYYY-MM-DD'),6,'016-8548-6547',3,9,1100000,210000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1044,'지수환','820305-1475286',to_date('2004-01-21','YYYY-MM-DD'),6,'011-5555-7548',3,9,1060000,220000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1045,'홍원신','690906-1985214',to_date('2003-03-16','YYYY-MM-DD'),9,'011-7777-7777',3,9,960000,152000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1046,'허경운','760105-1458752',to_date('1999-05-04','YYYY-MM-DD'),3,'017-3333-3333',6,5,2650000,150000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1047,'산마루','780505-1234567',to_date('2001-07-15','YYYY-MM-DD'),6,'018-0505-0505',3,8,2100000,112000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1048,'이기상','790604-1415141',to_date('2001-06-07','YYYY-MM-DD'),8,null,1,8,2050000,106000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1049,'이미성','830908-2456548',to_date('2000-04-07','YYYY-MM-DD'),7,'010-6654-8854',1,9,1300000,130000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1050,'이미인','810403-2828287',to_date('2003-06-07','YYYY-MM-DD'),2,'011-8585-5252',7,8,1950000,103000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1051,'권영미','790303-2155554',to_date('2000-06-04','YYYY-MM-DD'),6,'011-5555-7548',3,7,2260000,104000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1052,'권옥경','820406-2000456',to_date('2000-10-10','YYYY-MM-DD'),2,'010-3644-5577',2,9,1020000,105000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1053,'김싱식','800715-1313131',to_date('1999-12-12','YYYY-MM-DD'),9,'011-7585-7474',5,9,960000,108000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1054,'정상호','810705-1212141',to_date('1999-10-16','YYYY-MM-DD'),1,'016-1919-4242',7,9,980000,114000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1055,'정한나','820506-2425153',to_date('2004-06-07','YYYY-MM-DD'),6,'016-2424-4242',3,9,1000000,104000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1056,'전용재','800605-1456987',to_date('2004-08-13','YYYY-MM-DD'),7,'010-7549-8654',3,8,1950000,200000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1057,'이미경','780406-2003214',to_date('1998-02-11','YYYY-MM-DD'),2,'016-6542-7546',5,5,2520000,160000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1058,'김신제','800709-1321456',to_date('2003-08-08','YYYY-MM-DD'),7,'010-2415-5444',2,8,1950000,180000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1059,'임수봉','810809-2121244',to_date('2001-10-10','YYYY-MM-DD'),6,'011-4151-4154',1,9,890000,102000);
Insert into SCOTT.TBL_EMP (EMP_ID,EMP_NAME,SSN,IBSADATE,CITY_ID,TEL,BUSEO_ID,JIKWI_ID,BASICPAY,SUDANG) values (1060,'김신애','810809-2111111',to_date('2001-10-10','YYYY-MM-DD'),6,'011-4151-4444',1,9,900000,102000);
REM INSERTING into SCOTT.TBL_EVENTLOG
SET DEFINE OFF;
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('UPDATE 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('UPDATE 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('UPDATE 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('UPDATE 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('DELETE 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('DELETE 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('DELETE 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('DELETE 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('DELETE 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('DELETE 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('INSERT 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('UPDATE 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('UPDATE 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('DELETE 쿼리문이 수행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_EVENTLOG (MEMO,ILJA) values ('DELETE 쿼리가 실행되었습니다.',to_date('2022-03-14','YYYY-MM-DD'));
REM INSERTING into SCOTT.TBL_EXAMPLE1
SET DEFINE OFF;
REM INSERTING into SCOTT.TBL_EXAMPLE2
SET DEFINE OFF;
REM INSERTING into SCOTT.TBL_FILES
SET DEFINE OFF;
Insert into SCOTT.TBL_FILES (FILENO,FILENAME) values (1,'C:\AAA\BBB\CCC\SALES.DOC');
Insert into SCOTT.TBL_FILES (FILENO,FILENAME) values (2,'C:\AAA\PANMAE.XXLS');
Insert into SCOTT.TBL_FILES (FILENO,FILENAME) values (3,'D:\RESERACH.PPT');
Insert into SCOTT.TBL_FILES (FILENO,FILENAME) values (4,'C:\DOCUMENTS\STUDY.HWP');
Insert into SCOTT.TBL_FILES (FILENO,FILENAME) values (5,'DOCUMENTS\TEMP\SQL.TXT');
Insert into SCOTT.TBL_FILES (FILENO,FILENAME) values (6,'SHARE\F\TEST.PNG');
Insert into SCOTT.TBL_FILES (FILENO,FILENAME) values (7,'STUDY\ORACLE.SQL');
REM INSERTING into SCOTT.TBL_IDPW
SET DEFINE OFF;
Insert into SCOTT.TBL_IDPW (ID,PW) values ('happy','java006$');
Insert into SCOTT.TBL_IDPW (ID,PW) values ('rainbow','java006$');
REM INSERTING into SCOTT.TBL_INSA
SET DEFINE OFF;
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1001,'홍길동','771212-1022432',to_date('1998-10-11','YYYY-MM-DD'),'서울','011-2356-4528','기획부','부장',2610000,200000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1002,'이순신','801007-1544236',to_date('2000-11-29','YYYY-MM-DD'),'경기','010-4758-6532','총무부','사원',1320000,200000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1003,'이순애','770922-2312547',to_date('1999-02-25','YYYY-MM-DD'),'인천','010-4231-1236','개발부','부장',2550000,160000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1004,'김정훈','790304-1788896',to_date('2000-10-01','YYYY-MM-DD'),'전북','019-5236-4221','영업부','대리',1954200,170000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1005,'한석봉','811112-1566789',to_date('2004-08-13','YYYY-MM-DD'),'서울','018-5211-3542','총무부','사원',1420000,160000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1006,'이기자','780505-2978541',to_date('2002-02-11','YYYY-MM-DD'),'인천','010-3214-5357','개발부','과장',2265000,150000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1007,'장인철','780506-1625148',to_date('1998-03-16','YYYY-MM-DD'),'제주','011-2345-2525','개발부','대리',1250000,150000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1008,'김영년','821011-2362514',to_date('2002-04-30','YYYY-MM-DD'),'서울','016-2222-4444','홍보부','사원',950000,145000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1009,'나윤균','810810-1552147',to_date('2003-10-10','YYYY-MM-DD'),'경기','019-1111-2222','인사부','사원',840000,220400);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1010,'김종서','751010-1122233',to_date('1997-08-08','YYYY-MM-DD'),'부산','011-3214-5555','영업부','부장',2540000,130000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1011,'유관순','801010-2987897',to_date('2000-07-07','YYYY-MM-DD'),'서울','010-8888-4422','영업부','사원',1020000,140000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1012,'정한국','760909-1333333',to_date('1999-10-16','YYYY-MM-DD'),'강원','018-2222-4242','홍보부','사원',880000,114000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1013,'조미숙','790102-2777777',to_date('1998-06-07','YYYY-MM-DD'),'경기','019-6666-4444','홍보부','대리',1601000,103000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1014,'황진이','810707-2574812',to_date('2002-02-15','YYYY-MM-DD'),'인천','010-3214-5467','개발부','사원',1100000,130000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1015,'이현숙','800606-2954687',to_date('1999-07-26','YYYY-MM-DD'),'경기','016-2548-3365','총무부','사원',1050000,104000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1016,'이상헌','781010-1666678',to_date('2001-11-29','YYYY-MM-DD'),'경기','010-4526-1234','개발부','과장',2350000,150000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1017,'엄용수','820507-1452365',to_date('2000-08-28','YYYY-MM-DD'),'인천','010-3254-2542','개발부','사원',950000,210000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1018,'이성길','801028-1849534',to_date('2004-08-08','YYYY-MM-DD'),'전북','018-1333-3333','개발부','사원',880000,123000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1019,'박문수','780710-1985632',to_date('1999-12-10','YYYY-MM-DD'),'서울','017-4747-4848','인사부','과장',2300000,165000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1020,'유영희','800304-2741258',to_date('2003-10-10','YYYY-MM-DD'),'전남','011-9595-8585','자재부','사원',880000,140000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1021,'홍길남','801010-1111111',to_date('2001-09-07','YYYY-MM-DD'),'경기','011-9999-7575','개발부','사원',875000,120000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1022,'이영숙','800501-2312456',to_date('2003-02-25','YYYY-MM-DD'),'전남','017-5214-5282','기획부','대리',1960000,180000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1023,'김인수','731211-1214576',to_date('1995-02-23','YYYY-MM-DD'),'서울',null,'영업부','부장',2500000,170000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1024,'김말자','830225-2633334',to_date('1999-08-28','YYYY-MM-DD'),'서울','011-5248-7789','기획부','대리',1900000,170000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1025,'우재옥','801103-1654442',to_date('2000-10-01','YYYY-MM-DD'),'서울','010-4563-2587','영업부','사원',1100000,160000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1026,'김숙남','810907-2015457',to_date('2002-08-28','YYYY-MM-DD'),'경기','010-2112-5225','영업부','사원',1050000,150000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1027,'김영길','801216-1898752',to_date('2000-10-18','YYYY-MM-DD'),'서울','019-8523-1478','총무부','과장',2340000,170000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1028,'이남신','810101-1010101',to_date('2001-09-07','YYYY-MM-DD'),'제주','016-1818-4848','인사부','사원',892000,110000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1029,'김말숙','800301-2020202',to_date('2000-09-08','YYYY-MM-DD'),'서울','016-3535-3636','총무부','사원',920000,124000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1030,'정정해','790210-2101010',to_date('1999-10-17','YYYY-MM-DD'),'부산','019-6564-6752','총무부','과장',2304000,124000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1031,'지재환','771115-1687988',to_date('2001-01-21','YYYY-MM-DD'),'서울','019-5552-7511','기획부','부장',2450000,160000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1032,'심심해','810206-2222222',to_date('2000-05-05','YYYY-MM-DD'),'전북','016-8888-7474','자재부','사원',880000,108000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1033,'김미나','780505-2999999',to_date('1998-06-07','YYYY-MM-DD'),'서울','011-2444-4444','영업부','사원',1020000,104000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1034,'이정석','820505-1325468',to_date('2005-09-26','YYYY-MM-DD'),'경기','011-3697-7412','기획부','사원',1100000,160000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1035,'정영희','831010-2153252',to_date('2002-05-16','YYYY-MM-DD'),'인천',null,'개발부','사원',1050000,140000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1036,'이재영','701126-2852147',to_date('2003-08-10','YYYY-MM-DD'),'서울','011-9999-9999','자재부','사원',960400,190000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1037,'최석규','770129-1456987',to_date('1998-10-15','YYYY-MM-DD'),'인천','011-7777-7777','홍보부','과장',2350000,187000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1038,'손인수','791009-2321456',to_date('1999-11-15','YYYY-MM-DD'),'부산','010-6542-7412','영업부','대리',2000000,150000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1039,'고순정','800504-2000032',to_date('2003-12-28','YYYY-MM-DD'),'경기','010-2587-7895','영업부','대리',2010000,160000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1040,'박세열','790509-1635214',to_date('2000-09-10','YYYY-MM-DD'),'경북','016-4444-7777','인사부','대리',2100000,130000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1041,'문길수','721217-1951357',to_date('2001-12-10','YYYY-MM-DD'),'충남','016-4444-5555','자재부','과장',2300000,150000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1042,'채정희','810709-2000054',to_date('2003-10-17','YYYY-MM-DD'),'경기','011-5125-5511','개발부','사원',1020000,200000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1043,'양미옥','830504-2471523',to_date('2003-09-24','YYYY-MM-DD'),'서울','016-8548-6547','영업부','사원',1100000,210000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1044,'지수환','820305-1475286',to_date('2004-01-21','YYYY-MM-DD'),'서울','011-5555-7548','영업부','사원',1060000,220000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1045,'홍원신','690906-1985214',to_date('2003-03-16','YYYY-MM-DD'),'전북','011-7777-7777','영업부','사원',960000,152000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1046,'허경운','760105-1458752',to_date('1999-05-04','YYYY-MM-DD'),'경남','017-3333-3333','총무부','부장',2650000,150000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1047,'산마루','780505-1234567',to_date('2001-07-15','YYYY-MM-DD'),'서울','018-0505-0505','영업부','대리',2100000,112000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1048,'이기상','790604-1415141',to_date('2001-06-07','YYYY-MM-DD'),'전남',null,'개발부','대리',2050000,106000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1049,'이미성','830908-2456548',to_date('2000-04-07','YYYY-MM-DD'),'인천','010-6654-8854','개발부','사원',1300000,130000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1050,'이미인','810403-2828287',to_date('2003-06-07','YYYY-MM-DD'),'경기','011-8585-5252','홍보부','대리',1950000,103000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1051,'권영미','790303-2155554',to_date('2000-06-04','YYYY-MM-DD'),'서울','011-5555-7548','영업부','과장',2260000,104000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1052,'권옥경','820406-2000456',to_date('2000-10-10','YYYY-MM-DD'),'경기','010-3644-5577','기획부','사원',1020000,105000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1053,'김싱식','800715-1313131',to_date('1999-12-12','YYYY-MM-DD'),'전북','011-7585-7474','자재부','사원',960000,108000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1054,'정상호','810705-1212141',to_date('1999-10-16','YYYY-MM-DD'),'강원','016-1919-4242','홍보부','사원',980000,114000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1055,'정한나','820506-2425153',to_date('2004-06-07','YYYY-MM-DD'),'서울','016-2424-4242','영업부','사원',1000000,104000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1056,'전용재','800605-1456987',to_date('2004-08-13','YYYY-MM-DD'),'인천','010-7549-8654','영업부','대리',1950000,200000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1057,'이미경','780406-2003214',to_date('1998-02-11','YYYY-MM-DD'),'경기','016-6542-7546','자재부','부장',2520000,160000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1058,'김신제','800709-1321456',to_date('2003-08-08','YYYY-MM-DD'),'인천','010-2415-5444','기획부','대리',1950000,180000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1059,'임수봉','810809-2121244',to_date('2001-10-10','YYYY-MM-DD'),'서울','011-4151-4154','개발부','사원',890000,102000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1060,'김신애','810809-2111111',to_date('2001-10-10','YYYY-MM-DD'),'서울','011-4151-4444','개발부','사원',900000,102000);
Insert into SCOTT.TBL_INSA (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1061,'양윤정','970131-2234567',to_date('2022-03-11','YYYY-MM-DD'),'서울','010-8624-4533','개발부','대리',2000000,2000000);
REM INSERTING into SCOTT.TBL_INSABACKUP
SET DEFINE OFF;
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1001,'홍길동','771212-1022432',to_date('1998-10-11','YYYY-MM-DD'),'서울','011-2356-4528','기획부','부장',2610000,220000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1002,'이순신','801007-1544236',to_date('2000-11-29','YYYY-MM-DD'),'경기','010-4758-6532','총무부','사원',1320000,200000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1003,'이순애','770922-2312547',to_date('1999-02-25','YYYY-MM-DD'),'인천','010-4231-1236','개발부','부장',2550000,176000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1004,'김정훈','790304-1788896',to_date('2000-10-01','YYYY-MM-DD'),'전북','010-5236-4221','영업부','대리',1954200,170000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1005,'한석봉','811112-1566789',to_date('2004-08-13','YYYY-MM-DD'),'서울','010-5211-3542','총무부','사원',1420000,160000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1006,'이기자','780505-2978541',to_date('2002-02-11','YYYY-MM-DD'),'인천','010-3214-5357','개발부','과장',2265000,165000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1007,'장인철','780506-1625148',to_date('1998-03-16','YYYY-MM-DD'),'제주','011-2345-2525','개발부','대리',1250000,150000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1008,'김영년','821011-2362514',to_date('2002-04-30','YYYY-MM-DD'),'서울','010-2222-4444','홍보부','사원',950000,145000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1009,'나윤균','810810-1552147',to_date('2003-10-10','YYYY-MM-DD'),'경기','010-1111-2222','인사부','사원',840000,220400);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1010,'김종서','751010-1122233',to_date('1997-08-08','YYYY-MM-DD'),'부산','011-3214-5555','영업부','부장',2540000,143000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1011,'유관순','801010-2987897',to_date('2000-07-07','YYYY-MM-DD'),'서울','010-8888-4422','영업부','사원',1020000,140000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1012,'정한국','760909-1333333',to_date('1999-10-16','YYYY-MM-DD'),'강원','010-2222-4242','홍보부','사원',880000,114000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1013,'조미숙','790102-2777777',to_date('1998-06-07','YYYY-MM-DD'),'경기','010-6666-4444','홍보부','대리',1601000,103000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1014,'황진이','810707-2574812',to_date('2002-02-15','YYYY-MM-DD'),'인천','010-3214-5467','개발부','사원',1100000,130000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1015,'이현숙','800606-2954687',to_date('1999-07-26','YYYY-MM-DD'),'경기','010-2548-3365','총무부','사원',1050000,104000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1016,'이상헌','781010-1666678',to_date('2001-11-29','YYYY-MM-DD'),'경기','010-4526-1234','개발부','과장',2350000,165000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1017,'엄용수','820507-1452365',to_date('2000-08-28','YYYY-MM-DD'),'인천','010-3254-2542','개발부','사원',950000,210000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1018,'이성길','801028-1849534',to_date('2004-08-08','YYYY-MM-DD'),'전북','010-1333-3333','개발부','사원',880000,123000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1019,'박문수','780710-1985632',to_date('1999-12-10','YYYY-MM-DD'),'서울','010-4747-4848','인사부','과장',2300000,181500);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1020,'유영희','800304-2741258',to_date('2003-10-10','YYYY-MM-DD'),'전남','011-9595-8585','자재부','사원',880000,140000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1021,'홍길남','801010-1111111',to_date('2001-09-07','YYYY-MM-DD'),'경기','011-9999-7575','개발부','사원',875000,120000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1022,'이영숙','800501-2312456',to_date('2003-02-25','YYYY-MM-DD'),'전남','010-5214-5282','기획부','대리',1960000,180000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1023,'김인수','731211-1214576',to_date('1995-02-23','YYYY-MM-DD'),'서울',null,'영업부','부장',2500000,187000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1024,'김말자','830225-2633334',to_date('1999-08-28','YYYY-MM-DD'),'서울','011-5248-7789','기획부','대리',1900000,170000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1025,'우재옥','801103-1654442',to_date('2000-10-01','YYYY-MM-DD'),'서울','010-4563-2587','영업부','사원',1100000,160000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1026,'김숙남','810907-2015457',to_date('2002-08-28','YYYY-MM-DD'),'경기','010-2112-5225','영업부','사원',1050000,150000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1027,'김영길','801216-1898752',to_date('2000-10-18','YYYY-MM-DD'),'서울','010-8523-1478','총무부','과장',2340000,187000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1028,'이남신','810101-1010101',to_date('2001-09-07','YYYY-MM-DD'),'제주','010-1818-4848','인사부','사원',892000,110000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1029,'김말숙','800301-2020202',to_date('2000-09-08','YYYY-MM-DD'),'서울','010-3535-3636','총무부','사원',920000,124000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1030,'정정해','790210-2101010',to_date('1999-10-17','YYYY-MM-DD'),'부산','010-6564-6752','총무부','과장',2304000,136400);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1031,'지재환','771115-1687988',to_date('2001-01-21','YYYY-MM-DD'),'서울','010-5552-7511','기획부','부장',2450000,176000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1032,'심심해','810206-2222222',to_date('2000-05-05','YYYY-MM-DD'),'전북','010-8888-7474','자재부','사원',880000,108000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1033,'김미나','780505-2999999',to_date('1998-06-07','YYYY-MM-DD'),'서울','011-2444-4444','영업부','사원',1020000,104000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1034,'이정석','820505-1325468',to_date('2005-09-26','YYYY-MM-DD'),'경기','011-3697-7412','기획부','사원',1100000,160000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1035,'정영희','831010-2153252',to_date('2002-05-16','YYYY-MM-DD'),'인천',null,'개발부','사원',1050000,140000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1036,'이재영','701126-2852147',to_date('2003-08-10','YYYY-MM-DD'),'서울','011-9999-9999','자재부','사원',960400,190000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1037,'최석규','770129-1456987',to_date('1998-10-15','YYYY-MM-DD'),'인천','011-7777-7777','홍보부','과장',2350000,205700);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1038,'손인수','791009-2321456',to_date('1999-11-15','YYYY-MM-DD'),'부산','010-6542-7412','영업부','대리',2000000,150000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1039,'고순정','800504-2000032',to_date('2003-12-28','YYYY-MM-DD'),'경기','010-2587-7895','영업부','대리',2010000,160000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1040,'박세열','790509-1635214',to_date('2000-09-10','YYYY-MM-DD'),'경북','010-4444-7777','인사부','대리',2100000,130000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1041,'문길수','721217-1951357',to_date('2001-12-10','YYYY-MM-DD'),'충남','010-4444-5555','자재부','과장',2300000,165000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1042,'채정희','810709-2000054',to_date('2003-10-17','YYYY-MM-DD'),'경기','011-5125-5511','개발부','사원',1020000,200000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1043,'양미옥','830504-2471523',to_date('2003-09-24','YYYY-MM-DD'),'서울','010-8548-6547','영업부','사원',1100000,210000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1044,'지수환','820305-1475286',to_date('2004-01-21','YYYY-MM-DD'),'서울','011-5555-7548','영업부','사원',1060000,220000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1045,'홍원신','690906-1985214',to_date('2003-03-16','YYYY-MM-DD'),'전북','011-7777-7777','영업부','사원',960000,152000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1046,'허경운','760105-1458752',to_date('1999-05-04','YYYY-MM-DD'),'경남','010-3333-3333','총무부','부장',2650000,165000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1047,'산마루','780505-1234567',to_date('2001-07-15','YYYY-MM-DD'),'서울','010-0505-0505','영업부','대리',2100000,112000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1048,'이기상','790604-1415141',to_date('2001-06-07','YYYY-MM-DD'),'전남',null,'개발부','대리',2050000,106000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1049,'이미성','830908-2456548',to_date('2000-04-07','YYYY-MM-DD'),'인천','010-6654-8854','개발부','사원',1300000,130000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1050,'이미인','810403-2828287',to_date('2003-06-07','YYYY-MM-DD'),'경기','011-8585-5252','홍보부','대리',1950000,103000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1051,'권영미','790303-2155554',to_date('2000-06-04','YYYY-MM-DD'),'서울','011-5555-7548','영업부','과장',2260000,114400);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1052,'권옥경','820406-2000456',to_date('2000-10-10','YYYY-MM-DD'),'경기','010-3644-5577','기획부','사원',1020000,105000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1053,'김싱식','800715-1313131',to_date('1999-12-12','YYYY-MM-DD'),'전북','011-7585-7474','자재부','사원',960000,108000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1054,'정상호','810705-1212141',to_date('1999-10-16','YYYY-MM-DD'),'강원','010-1919-4242','홍보부','사원',980000,114000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1055,'정한나','820506-2425153',to_date('2004-06-07','YYYY-MM-DD'),'서울','010-2424-4242','영업부','사원',1000000,104000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1056,'전용재','800605-1456987',to_date('2004-08-13','YYYY-MM-DD'),'인천','010-7549-8654','영업부','대리',1950000,200000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1057,'이미경','780406-2003214',to_date('1998-02-11','YYYY-MM-DD'),'경기','010-6542-7546','자재부','부장',2520000,176000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1058,'김신제','800709-1321456',to_date('2003-08-08','YYYY-MM-DD'),'인천','010-2415-5444','기획부','대리',1950000,180000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1059,'임수봉','810809-2121244',to_date('2001-10-10','YYYY-MM-DD'),'서울','011-4151-4154','개발부','사원',890000,102000);
Insert into SCOTT.TBL_INSABACKUP (NUM,NAME,SSN,IBSADATE,CITY,TEL,BUSEO,JIKWI,BASICPAY,SUDANG) values (1060,'김신애','810809-2111111',to_date('2001-10-10','YYYY-MM-DD'),'서울','011-4151-4444','개발부','사원',900000,102000);
REM INSERTING into SCOTT.TBL_JIKWI
SET DEFINE OFF;
Insert into SCOTT.TBL_JIKWI (JIKWI_ID,JIKWI_NAME,MIN_BASICPAY) values (1,'사장',4250000);
Insert into SCOTT.TBL_JIKWI (JIKWI_ID,JIKWI_NAME,MIN_BASICPAY) values (2,'전무',3800000);
Insert into SCOTT.TBL_JIKWI (JIKWI_ID,JIKWI_NAME,MIN_BASICPAY) values (3,'상사',3500000);
Insert into SCOTT.TBL_JIKWI (JIKWI_ID,JIKWI_NAME,MIN_BASICPAY) values (4,'이사',3100000);
Insert into SCOTT.TBL_JIKWI (JIKWI_ID,JIKWI_NAME,MIN_BASICPAY) values (5,'부장',2450000);
Insert into SCOTT.TBL_JIKWI (JIKWI_ID,JIKWI_NAME,MIN_BASICPAY) values (6,'차장',2350000);
Insert into SCOTT.TBL_JIKWI (JIKWI_ID,JIKWI_NAME,MIN_BASICPAY) values (7,'과장',2260000);
Insert into SCOTT.TBL_JIKWI (JIKWI_ID,JIKWI_NAME,MIN_BASICPAY) values (8,'대리',1800000);
Insert into SCOTT.TBL_JIKWI (JIKWI_ID,JIKWI_NAME,MIN_BASICPAY) values (9,'사원',1650000);
REM INSERTING into SCOTT.TBL_JUMUN
SET DEFINE OFF;
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98778,'빼빼로',40,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98779,'맛동산',20,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98780,'모옹쉘',20,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98781,'빼빼로',30,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98764,'고래밥',10,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98765,'빼빼로',20,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98766,'맛동산',30,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98767,'홈런볼',40,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98768,'오감자',50,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98769,'웨하스',30,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98770,'고래밥',20,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98771,'맛동산',20,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98772,'웨하스',20,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98773,'빼빼로',90,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98774,'에이스',20,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98775,'꼬북칩',30,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98776,'모옹쉘',30,to_date('2022-03-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUN (JUNO,JECODE,JUSU,JUDAY) values (98777,'모옹쉘',10,to_date('2022-03-02','YYYY-MM-DD'));
REM INSERTING into SCOTT.TBL_JUMUNBACKUP
SET DEFINE OFF;
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (1,'빼빼로',20,to_date('2001-11-01','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (2,'거언빵',10,to_date('2001-11-01','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (3,'모옹쉘',30,to_date('2001-11-01','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (4,'눈감자',10,to_date('2001-11-02','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (5,'나아쵸',20,to_date('2001-11-05','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (6,'홈런볼',70,to_date('2001-11-06','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (7,'고래밥',50,to_date('2001-11-07','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (8,'포카칩',20,to_date('2001-11-07','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (9,'포카칩',20,to_date('2001-11-08','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (10,'포카칩',20,to_date('2001-11-09','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (11,'고래밥',50,to_date('2001-11-10','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (12,'고래밥',40,to_date('2001-11-11','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (13,'홈런볼',60,to_date('2001-11-12','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (14,'나아쵸',20,to_date('2001-11-13','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (15,'홈런볼',70,to_date('2001-11-14','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (16,'홈런볼',80,to_date('2001-11-15','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (17,'홈런볼',90,to_date('2001-11-16','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (18,'빼빼로',10,to_date('2001-11-17','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (19,'빼빼로',20,to_date('2001-11-19','YYYY-MM-DD'));
Insert into SCOTT.TBL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (20,'빼빼로',30,to_date('2001-11-20','YYYY-MM-DD'));
REM INSERTING into SCOTT.TBL_MEMBER
SET DEFINE OFF;
Insert into SCOTT.TBL_MEMBER (SID,NAME,TEL) values (8,'김민성','010-1234-1234');
Insert into SCOTT.TBL_MEMBER (SID,NAME,TEL) values (9,'이연주','010-4423-0463');
Insert into SCOTT.TBL_MEMBER (SID,NAME,TEL) values (1,'이윤태','010-1111-1112');
Insert into SCOTT.TBL_MEMBER (SID,NAME,TEL) values (2,'오이삭','010-2222-2223');
Insert into SCOTT.TBL_MEMBER (SID,NAME,TEL) values (3,'신시은','010-3333-3333');
REM INSERTING into SCOTT.TBL_MEMBERSCORE
SET DEFINE OFF;
Insert into SCOTT.TBL_MEMBERSCORE (SID,KOR,ENG,MAT) values (3,56,78,50);
Insert into SCOTT.TBL_MEMBERSCORE (SID,KOR,ENG,MAT) values (1,80,70,60);
REM INSERTING into SCOTT.TBL_SAWON
SET DEFINE OFF;
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1001,'김민성','9707251234567',to_date('2005-01-03','YYYY-MM-DD'),3000);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1002,'서민지','9505152234567',to_date('1999-11-23','YYYY-MM-DD'),4000);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1003,'이지연','9905192234567',to_date('2006-08-10','YYYY-MM-DD'),3000);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1004,'이연주','9609172234567',to_date('2007-10-10','YYYY-MM-DD'),4000);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1005,'오이삭','9805161234567',to_date('2020-04-01','YYYY-MM-DD'),1200);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1006,'이현이','8005132234567',to_date('1999-10-10','YYYY-MM-DD'),1000);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1007,'박한이','0204053234567',to_date('2010-10-10','YYYY-MM-DD'),3000);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1008,'선동렬','6803171234567',to_date('1998-10-10','YYYY-MM-DD'),1500);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1009,'선우용녀','6912232234567',to_date('1998-10-10','YYYY-MM-DD'),1300);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1010,'선우선','0303044234567',to_date('2010-10-10','YYYY-MM-DD'),1600);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1011,'남주혁','0506073234567',to_date('2012-10-10','YYYY-MM-DD'),2600);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1012,'남궁민','0208073234567',to_date('2012-10-10','YYYY-MM-DD'),2600);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1013,'남진','6712121234567',to_date('1998-10-10','YYYY-MM-DD'),2200);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1014,'홍수민','0005044234567',to_date('2015-10-10','YYYY-MM-DD'),5200);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1015,'임소민','9711232234567',to_date('2007-10-10','YYYY-MM-DD'),5500);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1016,'이이경','0603194234567',to_date('2015-01-20','YYYY-MM-DD'),1500);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1017,'이호석','9611121234567',to_date('2022-02-23','YYYY-MM-DD'),5000);
Insert into SCOTT.TBL_SAWON (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1018,'신시은','9910312234567',to_date('2022-02-23','YYYY-MM-DD'),5000);
REM INSERTING into SCOTT.TBL_SAWONBACKUP
SET DEFINE OFF;
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1001,'김민성','9707251234567',to_date('2005-01-03','YYYY-MM-DD'),3000);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1002,'서민지','9505152234567',to_date('1999-11-23','YYYY-MM-DD'),4000);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1003,'이지연','9905192234567',to_date('2006-08-10','YYYY-MM-DD'),3000);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1004,'이연주','9508162234567',to_date('2007-10-10','YYYY-MM-DD'),4000);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1005,'오이삭','9805161234567',to_date('2007-10-10','YYYY-MM-DD'),4000);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1006,'이현이','8005132234567',to_date('1999-10-10','YYYY-MM-DD'),1000);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1007,'박한이','0204053234567',to_date('2010-10-10','YYYY-MM-DD'),3000);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1008,'선동렬','6803171234567',to_date('1998-10-10','YYYY-MM-DD'),1500);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1009,'선우용녀','6912232234567',to_date('1998-10-10','YYYY-MM-DD'),1300);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1010,'선우선','0303044234567',to_date('2010-10-10','YYYY-MM-DD'),1600);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1011,'남주혁','0506073234567',to_date('2012-10-10','YYYY-MM-DD'),2600);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1012,'남궁민','0208073234567',to_date('2012-10-10','YYYY-MM-DD'),2600);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1013,'남진','6712121234567',to_date('1998-10-10','YYYY-MM-DD'),2200);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1014,'홍수민','0005044234567',to_date('2015-10-10','YYYY-MM-DD'),5200);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1015,'임소민','9711232234567',to_date('2007-10-10','YYYY-MM-DD'),5500);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1016,'이이경','0603194234567',to_date('2015-01-20','YYYY-MM-DD'),1500);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1017,'이호석','9611121234567',to_date('2022-02-23','YYYY-MM-DD'),5000);
Insert into SCOTT.TBL_SAWONBACKUP (SANO,SANAME,JUBUN,HIREDATE,SAL) values (1018,'신시은','9910312234567',to_date('2022-02-23','YYYY-MM-DD'),5000);
REM INSERTING into SCOTT.TBL_STUDENTS
SET DEFINE OFF;
Insert into SCOTT.TBL_STUDENTS (ID,NAME,TEL,ADDR) values ('happy','이시우','010-9999-9999','강원도 횡성');
Insert into SCOTT.TBL_STUDENTS (ID,NAME,TEL,ADDR) values ('rainbow','김정용','010-2222-2222','서울 강남구');
REM INSERTING into SCOTT.TBL_SUNGJUK
SET DEFINE OFF;
Insert into SCOTT.TBL_SUNGJUK (HAKBUN,NAME,KOR,ENG,MAT,TOT,AVG,GRADE) values (1,'최선하',90,80,70,240,80,'B');
Insert into SCOTT.TBL_SUNGJUK (HAKBUN,NAME,KOR,ENG,MAT,TOT,AVG,GRADE) values (2,'박현수',50,50,50,150,50,'F');
REM INSERTING into SCOTT.TBL_TEST1
SET DEFINE OFF;
Insert into SCOTT.TBL_TEST1 (ID,NAME,TEL) values (4,'한충희','010-4444-4444');
Insert into SCOTT.TBL_TEST1 (ID,NAME,TEL) values (6,'정금정','010-6666-6666');
REM INSERTING into SCOTT.TBL_TEST2
SET DEFINE OFF;
Insert into SCOTT.TBL_TEST2 (CODE,NAME) values (1,'텔레비전');
Insert into SCOTT.TBL_TEST2 (CODE,NAME) values (3,'세탁기');
REM INSERTING into SCOTT.TBL_TEST3
SET DEFINE OFF;
Insert into SCOTT.TBL_TEST3 (SID,CODE,SU) values (1,1,30);
Insert into SCOTT.TBL_TEST3 (SID,CODE,SU) values (2,1,50);
Insert into SCOTT.TBL_TEST3 (SID,CODE,SU) values (3,1,60);
Insert into SCOTT.TBL_TEST3 (SID,CODE,SU) values (4,1,30);
Insert into SCOTT.TBL_TEST3 (SID,CODE,SU) values (6,3,30);
Insert into SCOTT.TBL_TEST3 (SID,CODE,SU) values (10,3,30);
Insert into SCOTT.TBL_TEST3 (SID,CODE,SU) values (11,3,20);
Insert into SCOTT.TBL_TEST3 (SID,CODE,SU) values (12,3,30);
REM INSERTING into SCOTT.TBL_WATCH
SET DEFINE OFF;
Insert into SCOTT.TBL_WATCH (WATCH_NAME,BIGO) values ('금시계','순금 99.99% 함유된 최고급 시계');
Insert into SCOTT.TBL_WATCH (WATCH_NAME,BIGO) values ('금시계','고객 만족도 99.99점을 획득한 최고급 시계');
REM INSERTING into SCOTT."TBL_상품"
SET DEFINE OFF;
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('H001','바밤바',600,150);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('H002','죠스바',500,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('H003','메로나',500,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('H004','보석바',600,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('H005','쌍쌍바',600,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('H006','수박바',500,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('H007','빠삐코',500,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('C001','월드콘',1600,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('C002','빵빠레',1700,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('C003','구구콘',1800,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('C004','메타콘',1500,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('C005','부라보',1500,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('C006','슈퍼콘',1500,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('E001','빵또아',1100,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('E002','셀렉션',1700,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('E003','투게더',2500,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('E004','거북알',1500,0);
Insert into SCOTT."TBL_상품" ("상품코드","상품명","소비자가격","재고수량") values ('E005','팥빙수',1500,0);
REM INSERTING into SCOTT."TBL_입고"
SET DEFINE OFF;
Insert into SCOTT."TBL_입고" ("입고번호","상품코드","입고일자","입고수량","입고단가") values (1,'H001',to_date('2022-03-14','YYYY-MM-DD'),40,1000);
Insert into SCOTT."TBL_입고" ("입고번호","상품코드","입고일자","입고수량","입고단가") values (2,'H001',to_date('2022-03-14','YYYY-MM-DD'),60,1000);
Insert into SCOTT."TBL_입고" ("입고번호","상품코드","입고일자","입고수량","입고단가") values (3,'H001',to_date('2022-03-14','YYYY-MM-DD'),50,1000);
REM INSERTING into SCOTT."TBL_출고"
SET DEFINE OFF;
REM INSERTING into SCOTT.TNL_JUMUNBACKUP
SET DEFINE OFF;
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (1,'빼빼로',20,to_date('2001-11-01','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (2,'거언빵',10,to_date('2001-11-01','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (3,'모옹쉘',30,to_date('2001-11-01','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (4,'눈감자',10,to_date('2001-11-02','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (5,'나아쵸',20,to_date('2001-11-05','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (6,'홈런볼',70,to_date('2001-11-06','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (7,'고래밥',50,to_date('2001-11-07','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (8,'포카칩',20,to_date('2001-11-07','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (9,'포카칩',20,to_date('2001-11-08','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (10,'포카칩',20,to_date('2001-11-09','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (11,'고래밥',50,to_date('2001-11-10','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (12,'고래밥',40,to_date('2001-11-11','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (13,'홈런볼',60,to_date('2001-11-12','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (14,'나아쵸',20,to_date('2001-11-13','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (15,'홈런볼',70,to_date('2001-11-14','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (16,'홈런볼',80,to_date('2001-11-15','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (17,'홈런볼',90,to_date('2001-11-16','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (18,'빼빼로',10,to_date('2001-11-17','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (19,'빼빼로',20,to_date('2001-11-19','YYYY-MM-DD'));
Insert into SCOTT.TNL_JUMUNBACKUP (JUNO,JECODE,JUSU,JUDAY) values (20,'빼빼로',30,to_date('2001-11-20','YYYY-MM-DD'));
--------------------------------------------------------
--  DDL for Index TEST3_CODE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."TEST3_CODE_PK" ON "SCOTT"."TBL_TEST3" ("SID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_DEPT
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."PK_DEPT" ON "SCOTT"."DEPT" ("DEPTNO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MEMBER_SID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."MEMBER_SID_PK" ON "SCOTT"."TBL_MEMBER" ("SID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index JIKWI_JIKWI_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."JIKWI_JIKWI_ID_PK" ON "SCOTT"."TBL_JIKWI" ("JIKWI_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index 입고_입고번호_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."입고_입고번호_PK" ON "SCOTT"."TBL_입고" ("입고번호") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index EMP_EMP_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."EMP_EMP_ID_PK" ON "SCOTT"."TBL_EMP" ("EMP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOARD_NUM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."BOARD_NUM_PK" ON "SCOTT"."TBL_BOARD" ("NUM") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SUNGJUK_HAKBUN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."SUNGJUK_HAKBUN_PK" ON "SCOTT"."TBL_SUNGJUK" ("HAKBUN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index STUDENTS_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."STUDENTS_ID_PK" ON "SCOTT"."TBL_STUDENTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IDPW_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."IDPW_ID_PK" ON "SCOTT"."TBL_IDPW" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBL_INSA_NUM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."TBL_INSA_NUM_PK" ON "SCOTT"."TBL_INSA" ("NUM") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MEMBERSCORE_SID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."MEMBERSCORE_SID_PK" ON "SCOTT"."TBL_MEMBERSCORE" ("SID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CITY_CITY_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."CITY_CITY_ID_PK" ON "SCOTT"."TBL_CITY" ("CITY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BUSEO_BUSEO_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."BUSEO_BUSEO_ID_PK" ON "SCOTT"."TBL_BUSEO" ("BUSEO_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index 상품_상품코드_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."상품_상품코드_PK" ON "SCOTT"."TBL_상품" ("상품코드") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_EMP
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."PK_EMP" ON "SCOTT"."EMP" ("EMPNO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TEST1_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."TEST1_ID_PK" ON "SCOTT"."TBL_TEST1" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TEST2_CODE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOTT"."TEST2_CODE_PK" ON "SCOTT"."TBL_TEST2" ("CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger TRG_CHULGO
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SCOTT"."TRG_CHULGO" 
    AFTER
    INSERT OR UPDATE OR DELETE ON TBL_출고
    FOR EACH ROW
BEGIN
    IF (INSERTING)
        THEN UPDATE TBL_상품
        SET 재고수량 = 재고수량 - :NEW.출고수량
        WHERE 상품코드 = :NEW.상품코드;
    ELSIF (UPDATING)
        THEN UPDATE TBL_상품
        SET 재고수량 = 재고수량 + :OLD.출고수량 - :NEW.출고수량
        WHERE 상품코드 = :OLD.상품코드;
    ELSIF (DELETING)
        THEN UPDATE TBL_상품
        SET 재고수량 = 재고수량 + :OLD.출고수량
        WHERE 상품코드 = :OLD.상품코드;
    END IF;
END; 
/
ALTER TRIGGER "SCOTT"."TRG_CHULGO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_EVENTLOG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SCOTT"."TRG_EVENTLOG" 
    AFTER
    INSERT OR UPDATE OR DELETE ON TBL_TEST1
BEGIN
    --이벤트 종류 구분(조건문을 통한 분기)
    IF(INSERTING)
        THEN INSERT INTO TBL_EVENTLOG(MEMO)
            VALUES('INSERT 쿼리가 실행되었습니다.');
    ELSIF(UPDATING)
        THEN INSERT INTO TBL_EVENTLOG(MEMO)
            VALUES('UPDATE 쿼리가 실행되었습니다.');
    ELSIF(DELETING)
        THEN INSERT INTO TBL_EVENTLOG(MEMO)
            VALUES('DELETE 쿼리가 실행되었습니다.');
    END IF;

    --COMMIT;
    --※ TRIGGER 내에서는 COMMIT / ROLLBACK 구문 사용 불가~!!!
END;
/
ALTER TRIGGER "SCOTT"."TRG_EVENTLOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_EVNETLOG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SCOTT"."TRG_EVNETLOG" 
            AFTER 
            INSERT OR UPDATE OR DELETE ON TBL_TEST1
DECLARE
BEGIN
    -- 이벤트 종류 구분(조건문을 통한 분기)
    IF (INSERTING)
        THEN INSERT INTO TBL_EVENTLOG(MEMO)
             VALUES('INSERT 쿼리문이 수행되었습니다.');
    ELSIF (UPDATING)
        THEN INSERT INTO TBL_EVENTLOG(MEMO)
             VALUES('UPDATE 쿼리문이 수행되었습니다.');
    ELSIF (DELETING)
        THEN INSERT INTO TBL_EVENTLOG(MEMO)
             VALUES('DELETE 쿼리문이 수행되었습니다.');
    END IF;

    --COMMIT;
    --※ TRIGGER 내에서는 COMMIT 구문 사용 불가~!!!
END;
/
ALTER TRIGGER "SCOTT"."TRG_EVNETLOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_IBGO
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SCOTT"."TRG_IBGO" 
    AFTER
    INSERT OR UPDATE OR DELETE ON TBL_입고
    FOR EACH ROW
BEGIN
    IF (INSERTING)
        THEN UPDATE TBL_상품
        SET 재고수량 = 재고수량 + :NEW.입고수량
        WHERE 상품코드 = :NEW.상품코드;
    ELSIF (UPDATING)
        THEN UPDATE TBL_상품
        SET 재고수량 = 재고수량 - :OLD.입고수량 + :NEW.입고수량 --(-이전입고수량 + 갱신입고수량)
        WHERE 상품코드 = :OLD.상품코드; --원래 찾았어야 했던 코드기 때문에?
    ELSIF (DELETING)
        THEN UPDATE TBL_상품
        SET 재고수량 = 재고수량 - :OLD.입고수량 -- 이부분은 왜 OLD 인거지?(띠용때용 OLD랑 NEW 헷갈리고)
        WHERE 상품코드 = :OLD.상품코드;        
    END IF;
END;
/
ALTER TRIGGER "SCOTT"."TRG_IBGO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_TEST1_DML
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SCOTT"."TRG_TEST1_DML" 
    BEFORE
    INSERT OR DELETE OR UPDATE ON TBL_TEST1
BEGIN
    IF (TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) < 9 
    OR TO_NUMBER(TO_CHAR(SYSDATE,'HH24')) > 17)  
        THEN RAISE_APPLICATION_ERROR(-20003, '직업은 09:00 ~ 18:00 까지만 가능합니다.');
    END IF;
END;
/
ALTER TRIGGER "SCOTT"."TRG_TEST1_DML" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_TEST2_DELETE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SCOTT"."TRG_TEST2_DELETE" 
    BEFORE 
    DELETE ON TBL_TEST2 --부모테이블에 삭제 이벤트
    FOR EACH ROW    -- 각가의 행
BEGIN
    DELETE
    FROM TBL_TEST3
    WHERE CODE = :OLD.CODE;
END;    
/
ALTER TRIGGER "SCOTT"."TRG_TEST2_DELETE" ENABLE;
--------------------------------------------------------
--  DDL for Procedure PRC_INSA_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_INSA_INSERT" 
        (V_NAME                 IN TBL_INSA.NAME%TYPE
        ,V_SSN                  IN TBL_INSA.SSN%TYPE
        ,V_IBSADATE             IN TBL_INSA.IBSADATE%TYPE
        ,V_CITY                 IN TBL_INSA.CITY%TYPE
        ,V_TEL                  IN TBL_INSA.TEL%TYPE
        ,V_BUSEO                IN TBL_INSA.BUSEO%TYPE
        ,V_JIKWI                IN TBL_INSA.JIKWI%TYPE
        ,V_BASICPAY             IN TBL_INSA.BASICPAY%TYPE
        ,V_SUDANG               IN TBL_INSA.SUDANG%TYPE
        )
IS
        -- 추가 변수 
        V_NUM                   TBL_INSA.NUM%TYPE;
BEGIN
        -- 실행부
        SELECT MAX(NVL(NUM,0))+1 INTO V_NUM
        FROM TBL_INSA;

--INSERT 쿼리문 수행
        INSERT INTO TBL_INSA(NUM, NAME, SSN, IBSADATE, CITY, TEL, BUSEO, JIKWI, BASICPAY, SUDANG)
        VALUES(V_NUM, V_NAME, V_SSN, V_IBSADATE, V_CITY, V_TEL, V_BUSEO, V_JIKWI, V_BASICPAY, V_SUDANG);

-- 커밋
        COMMIT;

END;
--==>>Procedure PRC_INSA_INSERT이(가) 컴파일되었습니다.


--○ TBL_상품, TBL_입고 테이블을 대상으로
-- TBL_입고 테이블에 데이터 입력 시(즉, 입고 이벤트 발생 시)
-- TBL_상품 테이블의 재고수량이 함께 변동될 수 있는 기능을 가진 프로시저를 작성한다.
-- 단, 이 과정에서 입고번호는 자동 증가 처리한다.(시퀀스 사용 X)
-- TBL_입고 테이블 구성 컬럼
-- : 입고번호, 상품코드, 입고일자, 입고수량, 입고단가
-- 프로시저 명 : PRC_입고_INSERT(상품코드, 입고수량, 입고단가)

-- 'H001', 30, 400
-- → 입고테이블의 데이터 입력(프로시저 매개변수로 전달받지 못한 나머지 값 → 자동입력)
-- → 상품테이블의 바밤바 재고수량 30개

CREATE OR REPLACE PROCEDURE PRC_입고_INSERT
(V_상품코드     IN TBL_상품.상품코드%TYPE
,V_입고수량     IN TBL_입고.입고수량%TYPE
,V_입고단가     IN TBL_입고.입고단가%TYPE
)
IS
-- 추가변수
    V_입고번호  TBL_입고.입고번호%TYPE;
BEGIN
-- 실행부
    -- 입고 번호가 자동 증가    
    SELECT NVL(MAX(입고번호), 0) INTO V_입고번호
    FROM TBL_입고;

-- INSERT 쿼리문 수행 
    INSERT INTO TBL_입고(입고번호, 상품코드, 입고수량, 입고단가)
    VALUES((V_입고번호+1), V_상품코드, V_입고수량, V_입고단가);

    -- 재고수량이 함께 변동되어야 한다...  
    UPDATE TBL_상품
    SET 재고수량 = 재고수량 + V_입고수량
    WHERE 상품코드 = V_상품코드;

-- 예외 처리
    EXCEPTION 
        WHEN OTHERS THEN ROLLBACK;

-- 커밋
    COMMIT;
END;
--==>>Procedure PRC_입고_INSERT이(가) 컴파일되었습니다.

--------------------------------------------------------------------------------

--■■■ 프로시저 내에서의 예외 처리 ■■■--

--○ TBL_MEMBER 테이블에 데이터를 입력하는 프로시저를 작성
-- 단, 이 프로시저를 통해 데이터를 입력할 경우
-- CITY(지역) 항목에 '서울, 경기, 대전' 만 입력이 가능하도록 구성한다.
-- 이 지역 외의 다른 지역을 프로시저 호출을 통해 입력하고자 하는 경우
-- (즉, 입력을 시도하는 경우)
-- 예외에 대한 처리를 하려고 한다.
-- 프로시저 명 : PRC_MEMBER_INSERT()
/*
실행 예)
EXEC PRC_MEMBER_INSERT('임소민','010-1111-1111','서울');
--==>> 데이터 입력 0

EXEC PRC_MEMBER_INSERT('임소민','010-1111-1111','부산');
--==>> 데이터 입력 X
*/

CREATE OR REPLACE PROCEDURE PRC_MEMBER_INSERT
( V_NAME        IN TBL_MEMBER.NAME%TYPE
, V_TEL         IN TBL_MEMBER.TEL%TYPE
, V_CITY        IN TBL_MEMBER.CITY%TYPE
)
IS
    -- 선언부(주요 변수 선언)
    -- 실행 영역의 쿼리문 수행을 위해 필요한 변수 선언
    V_NUM       TBL_MEMBER.NUM%TYPE;

    -- 사용자 정의 예외에 대한 변수 선언 CHECK~!!!
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    -- 프로시저를 통해 입력 처리를 정상적으로 진행해야 할 데이터인지 아닌지의 여부를
    -- 가장 먼저 확인할 수 있도록 코드 구성
    IF(V_CITY NOT IN ('서울','경기','대전'))
        -- 예외 발생 CHECK~!!!
        THEN RAISE USER_DEFINE_ERROR;
    END IF;

    -- 선언한 변수에 값 담아내기
    SELECT NVL(MAX(NUM),0) INTO V_NUM
    FROM TBL_MEMBER;

    -- 쿼리문 구성 → INSERT
    INSERT INTO TBL_MEMBER(NUM, NAME, TEL, CITY)
    VALUES((V_NUM+1), V_NAME, V_TEL, V_CITY);

    -- 예외 처리 구문
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '서울, 경기, 대전만 입력이 가능합니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;

    -- 커밋
    COMMIT;
END;
--==>>Procedure PRC_MEMBER_INSERT이(가) 컴파일되었습니다.


--○ TBL_출고 테이블에 데이터 입력 시(즉, 출고 이벤트 발생 시)
-- TBL_상품 테이블의 재고수량이 변동되는 프로시저를 작성한다.
-- 단, 출고번호는 입고번호와 마찬가지로 자동 증가.
-- 또한, 출고수량이 재고수량보다 많은 경우...
-- 출고 액션을 취고할 수 있도록 처리한다.(출고가 이루어지지 않도록...) → 예외처리활용 CHECK!!
-- 프로시저 명 : PRC_출고_INSERT()
/*
PRC_출고_INSERT('H001', 10, 600);

-- 현재 상품 테이블의 바밤바 재고수량은 50개
PRC_출고_INSERT('H001', 60, 600);
--==>> 에러발생
-- (재고부족)
*/

SELECT *
FROM TBL_출고;

CREATE OR REPLACE PROCEDURE PRC_출고_INSERT
(

)

--------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE PRC_MEMBER_INSERT
( V_NAME        IN TBL_MEMBER.NAME%TYPE
, V_TEL         IN TBL_MEMBER.TEL%TYPE
, V_CITY        IN TBL_MEMBER.CITY%TYPE
)
IS
    -- 선언부(주요 변수 선언)
    -- 실행 영역의 쿼리문 수행을 위해 필요한 변수 선언
    V_NUM       TBL_MEMBER.NUM%TYPE;

    -- 사용자 정의 예외에 대한 변수 선언 CHECK~!!!
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    -- 프로시저를 통해 입력 처리를 정상적으로 진행해야 할 데이터인지 아닌지의 여부를
    -- 가장 먼저 확인할 수 있도록 코드 구성
    IF(V_CITY NOT IN ('서울','경기','대전'))
        -- 예외 발생 CHECK~!!!
        THEN RAISE USER_DEFINE_ERROR;
    END IF;

    -- 선언한 변수에 값 담아내기
    SELECT NVL(MAX(NUM),0) INTO V_NUM
    FROM TBL_MEMBER;

    -- 쿼리문 구성 → INSERT
    INSERT INTO TBL_MEMBER(NUM, NAME, TEL, CITY)
    VALUES((V_NUM+1), V_NAME, V_TEL, V_CITY);

    -- 예외 처리 구문
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '서울, 경기, 대전만 입력이 가능합니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;

    -- 커밋
    COMMIT;
END;










/
--------------------------------------------------------
--  DDL for Procedure PRC_MEMBERINSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_MEMBERINSERT" 
( VNAME IN      TBL_MEMBER.NAME%TYPE
, VTEL  IN      TBL_MEMBER.TEL%TYPE
)
IS 
    -- 주요 변수 선언
    VSID    TBL_MEMBER.SID%TYPE;
BEGIN
    -- 기존 SID 의 최대값 얻어오기
    SELECT NVL(MAX(SID),0) INTO VSID
    FROM TBL_MEMBER;

    -- 데이터 입력(INSERT 쿼리문 수행)
    INSERT INTO TBL_MEMBER(SID, NAME, TEL)
    VALUES((VSID+1), VNAME, VTEL);

    --커밋
    COMMIT;
END;

--○ 생성된 프로시저 테스트(확인)
EXEC PRC_MEMBERINSERT('이호석', '010-1111-1111');


--○ 테이블 조회
SELECT SID, NAME, TEL
FROM TBL_MEMBER
ORDER BY SID;


--○ JDBC08 의 Test001 실행 후 확인
SELECT *
FROM TBL_MEMBER
ORDER BY SID;
/*
1	이호석	010-1111-1111
2	이연주	010-4423-0463
3	홍길동	010-1111-1111
4	이브이	010-2222-3333
*/


--○ CallableStatement 실습을 위한 프로시저 작성
-- 프로시저 명 : PRC_MEMBERSELECT
-- 포로시저 기능 : TBL_MEMBER 테이블의 데이터를 읽어오는 프로시저
-- ※ 『SYS_REFCURSOR』 자료형을 이용하여 커서 다루기

CREATE OR REPLACE PROCEDURE PRC_MEMBERSELECT
( VRESULT   OUT SYS_REFCURSOR
)
IS 
    -- 주요 변수 선언
BEGIN
    OPEN VRESULT FOR
        SELECT SID, NAME, TEL
        FROM TBL_MEMBER
        ORDER BY SID;

    --CLOSE VRESULT;    (필요없음)
    --COMMIT;           (필요없음)
END;
--==>>Procedure PRC_MEMBERSELECT이(가) 컴파일되었습니다.


SELECT *
FROM TBL_MEMBER;

ROLLBACK;

/
--------------------------------------------------------
--  DDL for Procedure PRC_MEMBERSELECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_MEMBERSELECT" 
( VRESULT   OUT SYS_REFCURSOR
)
IS 
    -- 주요 변수 선언
BEGIN
    OPEN VRESULT FOR
        SELECT SID, NAME, TEL
        FROM TBL_MEMBER
        ORDER BY SID;

    --CLOSE VRESULT;    (필요없음)
    --COMMIT;           (필요없음)
END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_MEMBER_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_MEMBER_INSERT" 
( V_NAME        IN TBL_MEMBER.NAME%TYPE
, V_TEL         IN TBL_MEMBER.TEL%TYPE
, V_CITY        IN TBL_MEMBER.CITY%TYPE
)
IS
    -- 선언부(주요 변수 선언)
    -- 실행 영역의 쿼리문 수행을 위해 필요한 변수 선언
    V_NUM       TBL_MEMBER.NUM%TYPE;

    -- 사용자 정의 예외에 대한 변수 선언 CHECK~!!!
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    -- 프로시저를 통해 입력 처리를 정상적으로 진행해야 할 데이터인지 아닌지의 여부를
    -- 가장 먼저 확인할 수 있도록 코드 구성
    IF(V_CITY NOT IN ('서울','경기','대전'))
        -- 예외 발생 CHECK~!!!
        THEN RAISE USER_DEFINE_ERROR;
    END IF;

    -- 선언한 변수에 값 담아내기
    SELECT NVL(MAX(NUM),0) INTO V_NUM
    FROM TBL_MEMBER;

    -- 쿼리문 구성 → INSERT
    INSERT INTO TBL_MEMBER(NUM, NAME, TEL, CITY)
    VALUES((V_NUM+1), V_NAME, V_TEL, V_CITY);

    -- 예외 처리 구문
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '서울, 경기, 대전만 입력이 가능합니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;

    -- 커밋
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_STUDENTS_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_STUDENTS_UPDATE" 
    ( V_ID      IN TBL_IDPW.ID%TYPE
    , V_PW      IN TBL_IDPW.PW%TYPE
    , V_TEL     IN TBL_STUDENTS.TEL%TYPE
    , V_ADDR    IN TBL_STUDENTS.ADDR%TYPE
)   
IS 
  -- 변수 선언
BEGIN
  -- UPDATE 쿼리문 수행
  UPDATE (SELECT I.ID, I.PW, S.TEL, S.ADDR
          FROM TBL_IDPW I JOIN TBL_STUDENTS S
          ON I.ID = S.ID)T
  SET T.TEL = V_TEL, T.ADDR = V_ADDR
  WHERE T.ID = V_ID 
    AND T.PW = V_PW;

  -- 커밋
  COMMIT;

END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_STUDENT_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_STUDENT_INSERT" 
( V_ID      IN TBL_IDPW.ID%TYPE
, V_PW      IN TBL_IDPW.PW%TYPE
, V_NAME    IN TBL_STUDENTS.NAME%TYPE
, V_TEL     IN TBL_STUDENTS.TEL%TYPE
, V_ADDR    IN TBL_STUDENTS.ADDR%TYPE
)
IS
BEGIN
    -- TBL_IDPW 테이블에 데이터 입력()
    INSERT INTO TBL_IDPW(ID, PW)
    VALUES(V_ID, V_PW);

    -- TBL_STUDENTS 테이블에 데이터 입력
    INSERT INTO TBL_STUDENTS(ID, NAME, TEL, ADDR)
    VALUES(V_ID, V_NAME, V_TEL, V_ADDR);

    -- 커밋
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_STUDNETS_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_STUDNETS_INSERT" 
  -- 매개변수 선언
( V_ID IN TBL_IDPW.ID%TYPE
, V_PW IN TBL_IDPW.PW%TYPE
, V_NAME IN TBL_STUDENTS.NAME%TYPE
, V_TEL IN TBL_STUDENTS.TEL%TYPE
, V_ADDR IN TBL_STUDENTS.ADDR%TYPE
)
IS 
BEGIN
    -- TBL_IDPW 테이블에 데이터 입력 
    INSERT INTO TBL_IDPW(ID, PW)
    VALUES(V_ID, V_PW);

    -- TBL_STUDNETS 테이블에 데이터 입력
    INSERT INTO TBL_STUDENTS(ID, NAME, TEL, ADDR)
    VALUES(V_ID, V_NAME, V_TEL, V_ADDR);

    -- 커밋 --> DML 언어이므로
    COMMIT;

END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_SUNGJUK_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_SUNGJUK_INSERT" 
    (V_HAKBUN     IN TBL_SUNGJUK.HAKBUN%TYPE
    ,V_NAME       IN TBL_SUNGJUK.NAME%TYPE
    ,V_KOR        IN TBL_SUNGJUK.KOR%TYPE
    ,V_ENG        IN TBL_SUNGJUK.ENG%TYPE
    ,V_MAT        IN TBL_SUNGJUK.MAT%TYPE
    )
IS
    -- 선언부
    -- INSERT 쿼리문 수행을 하기 위해 필요한 추가 변수 구성
    V_TOT         TBL_SUNGJUK.TOT%TYPE;
    V_AVG         TBL_SUNGJUK.AVG%TYPE;
    V_GRADE       TBL_SUNGJUK.GRADE%TYPE;
BEGIN
    -- 실행부
    V_TOT := V_KOR + V_ENG + V_MAT;
    V_AVG := TRUNC(V_TOT/3);

    IF (V_AVG >= 90) THEN V_GRADE := 'A';
    ELSIF (V_AVG >= 80) THEN V_GRADE := 'B';
    ELSIF (V_AVG >= 70) THEN V_GRADE := 'C';
    ELSIF (V_AVG >= 60) THEN V_GRADE := 'D';
    ELSE V_AVG := 'F';
    END IF;

    --INSERT 쿼리문 수행
    INSERT INTO TBL_SUNGJUK(HAKBUN, NAME, KOR, ENG, MAT, TOT, AVG, GRADE)
    VALUES(V_HAKBUN, V_NAME, V_KOR, V_ENG, V_MAT, V_TOT, V_AVG, V_GRADE);

    -- 커밋
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_SUNGJUK_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_SUNGJUK_UPDATE" 
( V_HAKBUN  IN TBL_SUNGJUK.HAKBUN%TYPE
, V_KOR     IN TBL_SUNGJUK.KOR%TYPE
, V_ENG     IN TBL_SUNGJUK.ENG%TYPE
, V_MAT     IN TBL_SUNGJUK.MAT%TYPE
)
IS
  -- UPDATE 진행 시 필요한 데이터를 담을 주요 변수 선언 
  V_TOT     TBL_SUNGJUK.TOT%TYPE;
  V_AVG     TBL_SUNGJUK.AVG%TYPE;
  V_GRADE   TBL_SUNGJUK.GRADE%TYPE;
BEGIN
  -- 아래의 쿼리문 실행을 위해서는 
  -- 선언한 변수들에 값을 담아내야 한다.
  V_TOT := V_KOR + V_ENG + V_MAT;
  V_AVG := TRUNC(V_TOT / 3); 
  IF (V_AVG>= 90) 
    THEN V_GRADE := 'A';
  ELSIF (V_AVG>=80)
    THEN V_GRADE := 'B';
  ELSIF (V_AVG>=70)
    THEN V_GRADE := 'C';
  ELSIF (V_AVG>=60)
    THEN V_GRADE := 'D';
  ELSE V_GRADE := 'F';
  END IF; 

  -- UPDATE 쿼리문 수행
  UPDATE TBL_SUNGJUK
  SET KOR = V_KOR, ENG = V_ENG, MAT = V_MAT, TOT = V_TOT, AVG = V_AVG, GRADE = V_GRADE
  WHERE HAKBUN = V_HAKBUN;

  -- 커밋
  COMMIT;

END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_입고_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_입고_DELETE" 
(
    V_입고번호 IN TBL_입고.입고번호%TYPE
)
IS
    V_상품코드 TBL_상품.상품코드%TYPE;
    V_입고수량 TBL_입고.입고수량%TYPE;
    V_재고수량 TBL_상품.재고수량%TYPE;    

    USER_DEFINE_ERROR EXCEPTION;

BEGIN
    SELECT 상품코드, 입고수량 INTO V_상품코드, V_입고수량
    FROM TBL_입고
    WHERE 입고번호 = V_입고번호;

    SELECT 재고수량 INTO V_재고수량
    FROM TBL_상품
    WHERE 상품코드 = V_상품코드;   

    IF (V_재고수량 - V_입고수량 < 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;

    -- 삭제구문
    DELETE
    FROM TBL_입고
    WHERE 입고번호 = V_입고번호;

    UPDATE TBL_상품
    SET 재고수량 = 재고수량 - V_입고수량
    WHERE 상품코드 = V_상품코드;   

    COMMIT;

    EXCEPTION
        WHEN USER_DEFINE_ERROR
         THEN RAISE_APPLICATION_ERROR(-20004, '입고 내역을 삭제 불가.' );
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;

END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_입고_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_입고_INSERT" 
(V_상품코드     IN TBL_상품.상품코드%TYPE
,V_입고수량     IN TBL_입고.입고수량%TYPE
,V_입고단가     IN TBL_입고.입고단가%TYPE
)
IS
-- 추가변수
    V_입고번호  TBL_입고.입고번호%TYPE;
BEGIN
-- 실행부
    -- 입고 번호가 자동 증가    
    SELECT NVL(MAX(입고번호), 0) INTO V_입고번호
    FROM TBL_입고;

-- INSERT 쿼리문 수행 
    INSERT INTO TBL_입고(입고번호, 상품코드, 입고수량, 입고단가)
    VALUES((V_입고번호+1), V_상품코드, V_입고수량, V_입고단가);

    -- 재고수량이 함께 변동되어야 한다...  
    UPDATE TBL_상품
    SET 재고수량 = 재고수량 + V_입고수량
    WHERE 상품코드 = V_상품코드;

-- 예외 처리
    EXCEPTION 
        WHEN OTHERS THEN ROLLBACK;

-- 커밋
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_입고_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_입고_UPDATE" 
(
        --① 매개변수 구성
    V_입고번호      IN TBL_입고.입고번호%TYPE
    , V_입고수량    IN TBL_입고.입고수량%TYPE
)
IS
        --③ 필요한 변수 선언
    V_상품코드          TBL_상품.상품코드%TYPE;
    V_이전입고수량      TBL_입고.입고수량%TYPE;
    V_재고수량          TBL_상품.재고수량%TYPE;
    USER_DEFINE_ERROR   EXCEPTION;    
BEGIN
        --④ 선언한 변수에 값 담아내기
    SELECT 상품코드, 입고수량 INTO V_상품코드, V_이전입고수량
    FROM TBL_입고
    WHERE 입고번호 = V_입고번호;

        --⑧ 입고 정상수행여부 판단 필요
        -- 변경 이전의 재고수량 및 현재의 재고수량 확인    
    SELECT 재고수량 INTO V_재고수량
    FROM TBL_상품
    WHERE 상품코드 = V_상품코드;

    IF (V_재고수량 - V_이전입고수량 + V_입고수량 < 0)
        THEN RAISE USER_DEFINE_ERROR; 
    END IF;      

        --② 수행될 쿼리문 체크(UPDATE→TBL_입고 / UPDATE→TBL_상품)    
    UPDATE TBL_입고
    SET 입고수량 = V_이전입고수량 + V_입고수량
    WHERE 입고번호 = V_입고번호;
        --⑤    
    UPDATE TBL_상품
    SET 재고수량 = 재고수량 - V_이전입고수량 + V_입고수량
    WHERE 상품코드 = V_상품코드;

        --⑦ 커밋    
    COMMIT;

    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '입고 수량 부족~!!');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;    
END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_입고_업데이트
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_입고_업데이트" 
(
    V_입고번호      IN TBL_입고.입고번호%TYPE
    , V_입고수량    IN TBL_입고.입고수량%TYPE
)
IS 
    V_상품코드          TBL_상품.상품코드%TYPE;
    V_이전입고수량      TBL_상품.입고수량%TYPE;
    V_재고수량          TBL_상품.재고수량%TYPE;
BEGIN
    SELECT 상품코드, 입고수량 INTO V_상품고드, V_이전입고수량
    FROM TBL_입고
    WHERE 입고번호 = V_입고번호;

    SELECT 재고수량 INTO V_재고수량
    FROM TBL_상품
    WHERE 상품코드 = V_상품코드;

    UPDATE TBL_입고
    SET 입고수량 = V_이전입고수량 + V_입고수량
    WHERE 입고번호 = V_입고번호;

    UPDATE TBL_상품
    SET 재고수량 = 재고수량 + V_이전입고수량 + V_입고수량
    WHERE 상품코드 = V_상품코드;

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_출고_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_출고_DELETE" 
(
    V_출고번호 IN TBL_출고.출고번호%TYPE
)
IS
    V_상품코드 TBL_상품.상품코드%TYPE;
    V_출고수량 TBL_출고.출고수량%TYPE;
    V_재고수량 TBL_상품.재고수량%TYPE;
BEGIN
    SELECT 상품코드, 출고수량 INTO V_상품코드,V_출고수량
    FROM TBL_출고
    WHERE 출고번호 = V_출고번호;

    SELECT 재고수량 INTO V_재고수량
    FROM TBL_상품
    WHERE 상품코드 = V_상품코드;

    DELETE
    FROM TBL_출고
    WHERE 출고번호 = V_출고번호;

    UPDATE TBL_상품
    SET 재고수량 = 재고수량 + V_출고수량
    WHERE 상품코드 = V_상품코드;    

    COMMIT;

END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_출고_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_출고_INSERT" 
        ( V_상품코드    IN TBL_출고.상품코드%TYPE
        , V_출고수량    IN TBL_출고.출고수량%TYPE
        , V_출고단가    IN TBL_출고.출고단가%TYPE
        )
IS
         V_출고번호    TBL_출고.출고번호%TYPE; 
         V_재고수량    TBL_상품.재고수량%TYPE;

         USER_DEFINE_ERROR EXCEPTION;
BEGIN   
        -- 이부분 참고...
        -- 쿼리문 수행 이전에 수행 여부를 확인하는 과정에서 
        -- 재고 파악 → 기존 재고를 확인하는 과정이 선행되어야 한다.
        -- 그래야 프로시저 호출 시 넘겨받는 출고수량과 비교가 가능하기 때문...
        SELECT 재고수량 INTO V_재고수량
        FROM TBL_상품
        WHERE 상품코드 = V_상품코드;

        -- 출고를 정상적으로 진행해 줄 것인지에 대한 여부 확인
        -- 위에서 파악한 재고수량보다 현재 프로시저에서 넘겨받은 출고수량이 많으면
        -- 예외 발생~!!!
        IF(V_출고수량 > V_재고수량)
            -- 예외발생
            THEN RAISE USER_DEFINE_ERROR;
        END IF;

        -- 출고번호 자동증가
        SELECT NVL(MAX(출고번호),0) INTO V_출고번호
        FROM TBL_출고;  

        -- 쿼리문 구성 → INSERT(TBL_출고)
        INSERT INTO TBL_출고(출고번호, 상품코드, 출고수량, 출고단가)
        VALUES((V_출고번호+1), V_상품코드, V_출고수량, V_출고단가);

        -- 쿼리문 구성 → UPDATE(TBL_상품)
        UPDATE TBL_상품
        SET 재고수량 = 재고수량 - V_출고수량
        WHERE 상품코드 = V_상품코드;

        --예외 처리 구문
        EXCEPTION
            WHEN USER_DEFINE_ERROR
                THEN RAISE_APPLICATION_ERROR(-20002,'재고부족');
                    ROLLBACK;
            WHEN OTHERS
                THEN ROLLBACK;

        -- 커밋
        COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure PRC_출고_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SCOTT"."PRC_출고_UPDATE" 
( 
        --① 매개변수 구성
        V_출고번호    IN TBL_출고.출고번호%TYPE
        , V_출고수량    IN TBL_출고.출고수량%TYPE
)
IS
        --③ 필요한 변수 선언
        V_상품코드        TBL_상품.상품코드%TYPE;
        V_이전출고수량    TBL_출고.출고수량%TYPE;
        V_재고수량        TBL_상품.재고수량%TYPE;

        -- 예외처리 
         USER_DEFINE_ERROR EXCEPTION;
BEGIN
        --④ 선언한 변수에 값 담아내기
        SELECT 상품코드, 출고수량 INTO V_상품코드, V_이전출고수량
        FROM TBL_출고
        WHERE 출고번호 = V_출고번호;

        --⑧ 출고 정상수행여부 판단 필요
        -- 변경 이전의 출고수량 및 현재의 재고수량 확인
        SELECT 재고수량 INTO V_재고수량
        FROM TBL_상품
        WHERE 상품코드 = V_상품코드;

        -- ⑨파악한 재고수량에 따라 데이터 변경 실시 여부 판단
        -- 『재고수량+이전출고수량 < 현재출고수량』 인 상황이라면... 사용자정의예외 발생
        IF(V_재고수량 + V_이전출고수량 < V_출고수량)
            -- 예외발생
            THEN RAISE USER_DEFINE_ERROR;
        END IF;

        --② 수행될 쿼리문 체크(UPDATE→TBL_출고 / UPDATE→TBL_상품)
        UPDATE TBL_출고
        SET 출고수량 = V_출고수량
        WHERE 출고번호 = V_출고번호;

        --⑤         
        UPDATE TBL_상품
        SET 재고수량 = 재고수량+V_이전출고수량-V_출고수량
        WHERE 상품코드 = V_상품코드;

        --⑦ 커밋
        COMMIT;

        --⑩ 예외 처리 구문
        EXCEPTION
            WHEN USER_DEFINE_ERROR
                THEN RAISE_APPLICATION_ERROR(-20002,'재고부족');
                    ROLLBACK;
            WHEN OTHERS
                THEN ROLLBACK;        
END;
--==>> Procedure PRC_출고_UPDATE이(가) 컴파일되었습니다.



/*
1. PRC_입고_UPDATE(입고번호, 입고수량)
2. PRC_입고_DELETE(입고번호)
3. PRC_출고_DELET(출고번호)
*/



--1. PRC_입고_UPDATE(입고번호, 입고수량)
CREATE OR REPLACE PROCEDURE PRC_입고_UPDATE
(
        --① 매개변수 구성
    V_입고번호      IN TBL_입고.입고번호%TYPE
    , V_입고수량    IN TBL_입고.입고수량%TYPE
)
IS
        --③ 필요한 변수 선언
    V_상품코드          TBL_상품.상품코드%TYPE;
    V_이전입고수량      TBL_입고.입고수량%TYPE;
    V_재고수량          TBL_상품.재고수량%TYPE;
    USER_DEFINE_ERROR   EXCEPTION;    
BEGIN
        --④ 선언한 변수에 값 담아내기
    SELECT 상품코드, 입고수량 INTO V_상품코드, V_이전입고수량
    FROM TBL_입고
    WHERE 입고번호 = V_입고번호;

        --⑧ 입고 정상수행여부 판단 필요
        -- 변경 이전의 재고수량 및 현재의 재고수량 확인    
    SELECT 재고수량 INTO V_재고수량
    FROM TBL_상품
    WHERE 상품코드 = V_상품코드;

        -- 입고수량이 음수값 나올 일이 있나...?
        -- 재고가 0에서 밑으로 떨어지지 않으면... 음수값이 나올 일이 없지 않나... 
    IF (V_재고수량 - V_이전입고수량 + V_입고수량 < 0)
        THEN RAISE USER_DEFINE_ERROR; 
    END IF;      

        --② 수행될 쿼리문 체크(UPDATE→TBL_입고 / UPDATE→TBL_상품)    
    UPDATE TBL_입고
    SET 입고수량 = V_이전입고수량 + V_입고수량
    WHERE 입고번호 = V_입고번호;
        --⑤    
    UPDATE TBL_상품
    SET 재고수량 = 재고수량 - V_이전입고수량 + V_입고수량
    WHERE 상품코드 = V_상품코드;

        --⑦ 커밋    
    COMMIT;

    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '입고 수량 부족~!!');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;    
END;


--2. PRC_입고_DELETE(입고번호)       

SELECT *
FROM TBL_입고;

SELECT *
FROM TBL_상품;

CREATE OR REPLACE PROCEDURE PRC_입고_DELETE
(
    V_입고번호 IN TBL_입고.입고번호%TYPE
)
IS
    V_상품코드 TBL_상품.상품코드%TYPE;
    V_입고수량 TBL_입고.입고수량%TYPE;
    V_재고수량 TBL_상품.재고수량%TYPE;    

    USER_DEFINE_ERROR EXCEPTION;

BEGIN
    SELECT 상품코드, 입고수량 INTO V_상품코드, V_입고수량
    FROM TBL_입고
    WHERE 입고번호 = V_입고번호;

    SELECT 재고수량 INTO V_재고수량
    FROM TBL_상품
    WHERE 상품코드 = V_상품코드;   

    IF (V_재고수량 - V_입고수량 < 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;

    -- 삭제구문
    DELETE
    FROM TBL_입고
    WHERE 입고번호 = V_입고번호;

    UPDATE TBL_상품
    SET 재고수량 = 재고수량 - V_입고수량
    WHERE 상품코드 = V_상품코드;   

    COMMIT;

    EXCEPTION
        WHEN USER_DEFINE_ERROR
         THEN RAISE_APPLICATION_ERROR(-20004, '입고 내역을 삭제 불가.' );
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;

END;


--3. PRC_출고_DELETE(출고번호)
CREATE OR REPLACE PROCEDURE PRC_출고_DELETE
(
    V_출고번호 IN TBL_출고.출고번호%TYPE
)
IS
    V_상품코드 TBL_상품.상품코드%TYPE;
    V_출고수량 TBL_출고.출고수량%TYPE;
    V_재고수량 TBL_상품.재고수량%TYPE;
BEGIN
    SELECT 상품코드, 출고수량 INTO V_상품코드,V_출고수량
    FROM TBL_출고
    WHERE 출고번호 = V_출고번호;   

    SELECT 재고수량 INTO V_재고수량
    FROM TBL_상품
    WHERE 상품코드 = V_상품코드;

    DELETE
    FROM TBL_출고
    WHERE 출고번호 = V_출고번호;

    UPDATE TBL_상품
    SET 재고수량 = 재고수량 + V_출고수량
    WHERE 상품코드 = V_상품코드;    

    COMMIT;

    EXCEPTION
        WHEN OTHERS
            THEN ROLLBACK;

END;


--------------------------------------------------------------------------------


--■■■ CURSOR(커서) ■■■--

--1. 오라클에서는 하나의 레코드가 아닌 여러 레코드로 구성된
-- 작업 영역에서 SQL 문을 실행하고 그 과정에서 발생한 정보를
-- 저장하기 위해 커서(CURSOR)를 사용하며,
-- 커서에는 암시적인 커서와 명시적인 커서가 있다.

--2. 암시적 커서는 모든 SQL 구문에 존재하며
--SQL 문 실행 후 오직 하나의 행(ROW)만 출력하게 된다.
-- 그러나 SQL 문을 실행한 결과물 RESULT SET(RESULT SET)이
-- 여러 행(ROW)으로 구성된 경우
-- 커서(CURSOR)를 명시적으로 선언해야 여러 행(ROW)을 다룰 수 있다.

--○ 커서 이용 전 상황(단일 행 접근 시)
SELECT SERVEROUTPUT ON;
























/
--------------------------------------------------------
--  DDL for Package INSA_PACK
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "SCOTT"."INSA_PACK" 
IS
    FUNCTION FN_GENDER(V_SSN VARCHAR2)
    RETURN VARCHAR2;  
END INSA_PACK;

/
--------------------------------------------------------
--  DDL for Package Body INSA_PACK
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "SCOTT"."INSA_PACK" 
IS
    FUNCTION FN_GENDER(V_SSN VARCHAR2)
    RETURN VARCHAR2
    IS
        V_RESULT VARCHAR2(20);
    BEGIN
        IF (SUBSTR(V_SSN,8,1) IN ('1','3'))
            THEN V_RESULT := '남자';
        ELSIF (SUBSTR(V_SSN,8,1) IN ('2','4'))   
            THEN V_RESULT := '여자';
        ELSE 
            V_RESULT := '확인불가';
        END IF;

        RETURN V_RESULT;
    END;
END INSA_PACK;

/
--------------------------------------------------------
--  DDL for Function FN_GENDER
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SCOTT"."FN_GENDER" (V_SSN VARCHAR2)  -- 매개변수 : 자릿수(길이) 지정 안함
RETURN VARCHAR2                                       -- 반환자료형 : 자릿수(길이) 지정 안함
IS 
    -- 선언부 → 주요 변수 선언
    V_RESULT VARCHAR2(20);
BEGIN
    -- 실행부(정의부) → 연산 및 처리
    IF(SUBSTR(V_SSN,8,1)IN('1','3'))
        THEN V_RESULT := '남자';
    ELSIF(SUBSTR(V_SSN,8,1)IN('2','4')) 
        THEN V_RESULT := '여자';    
    ELSE 
        V_RESULT := '성별확인불가';
    END IF;

    -- 결과값 반환 CHECK~!!!
    RETURN V_RESULT;
END;
--==>> Function FN_GENDER이(가) 컴파일되었습니다.


--○ 임의의 정수 두 개를 매개변수(입력 파라미터)로 넘겨받아 → (A,B)
-- A의 B 승의 값을 반환하는 사용자 정의 함수를 작성한다.
-- 단, 기존의 오라클 내장 함수를 이용하지 않고, 반복문을 활용하여 작성한다.
-- 함수명 : FN_POW()
/*
사용 예)
SELECT FN_POW(10, 3)
FROM DUAL;
--==>> 1000
*/



CREATE OR REPLACE FUNCTION FN_POW(A NUMBER,B NUMBER)  -- 매개변수 : 자릿수(길이) 지정 안함
RETURN NUMBER 
IS 
    -- 선언부 → 주요 변수 선언
    V_RESULT    NUMBER := 1;    -- 숫자
    V_NUM       NUMBER;         -- 승
BEGIN
    -- 반복문 구성
    FOR V_NUM IN 1 .. B LOOP
        V_RESULT := V_RESULT * A;
    END LOOP;

    RETURN V_RESULT;
END;


--○ TBL_INSA 테이블의 급여 계산 전용 함수를 정의한다.
-- 급여는 (기본급*12)+수당 기반으로 연산을 수행한다.
-- 함수명 : FN_PAY(기본급, 수당)

CREATE OR REPLACE FUNCTION FN_PAY(V_BASICPAY NUMBER, V_SUDANG NUMBER)
RETURN NUMBER
IS
    -- 주요 변수 선언
    V_RESULT    NUMBER;
BEGIN 
    -- 연산 및 처리
    V_RESULT := (NVL(V_BASICPAY,0)*12) + NVL(V_SUDANG,0);
    -- 최종 결과값 반환
    RETURN V_RESULT;
END;



--○TBL_INSA 테이블에서 입사일을 기준으로 현재까지의 
-- 근무년수를 반환하는 함수를 정의한다.
-- 단, 근무년수는 소수점 이하 한자리까지 계산한다.
-- 함수명 : FN_WORKYEAR(입사일)

CREATE OR REPLACE FUNCTION FN_WORKYEAR(IBSADATE DATE)
RETURN NUMBER
IS
    V_RESULT    NUMBER;
BEGIN
    V_RESULT := TRUNC(((SYSDATE-IBSADATE)/365),1);
    RETURN V_RESULT;
END;

SELECT TRUNC(((SYSDATE-IBSADATE)/365),1)"ㅎ"
FROM TBL_INSA;
--==>> Function FN_WORKYEAR이(가) 컴파일되었습니다.


CREATE OR REPLACE FUNCTION FN_WORKYEAR(IBSADATE DATE)
RETURN VARCHAR2
IS
    V_RESULT    VARCHAR(20);
BEGIN
    V_RESULT := TRUNC(MONTHS_BETWEEN(SYSDATE,IBSADATE)/12)||'년'||
                TRUNC(MOD(MONTHS_BETWEEN(SYSDATE,IBSADATE),12))||'개월';    
    RETURN V_RESULT;
END;
--------------------------------------------------------------------------------
--※ 참고
-- 1. INSERT, UPDATE, DELETE, (MERGE)
--==>> DML(Data Manipulation Language)
-- COMMIT / ROLLBACK 이 필요하다.

-- 2. CREATE, DROP, ALTER, (TRUNCATE)
--==>> DDL(Data Definition Language)
-- 실행하면 자동으로 COMMIT 된다.

-- 3. GRANT, REVOKE
--==>> DCL(Data Control Language)
-- 실행하면 자동으로 COMMIT 된다.

-- 4. COMMIT, ROLLBACK
--==>> TCL(Transaction Control Language)

-- 정적 pl/sql문 → DML문, TCL문만 사용 가능하다.
-- 동적 pl/sql문 → DML문, DDL문, DCL문, TCL문 사용 가능하다.
--------------------------------------------------------------------------------

--■■■ PROCEDURE(프로시저) ■■■--

--1. PL/SQL 에서 가장 대표적인 구조인 스토어드 프로시저는
-- 개발자가 자주 작성해야 하는 업무의 흐름을
-- 미리 작성하여 데이터베이스 내에 저장해 두었다가
-- 필요할 때 마다 호출하여 실행할 수 있도록 처리해 주는 구문이다.

--2. 형식 및 구조
/*
CREATE [OR REPLACE] PROCEDURE 프로시저명
[( 매개변수 IN 데이터타입
, 매개변수 OUT 데이터타입
, 매개변수 INOUT 데이터타입
)]
IS
    [-- 주요 변수 선언]
BEGIN
    -- 실행 구문; 
    ...
    [EXCEPTION
    -- 예외 처리 구문;]
*/

--※ FUNCTION 과 비교했을때 RETURN 반환자료형 부분이 존재하지 않으며,
-- RETURN 문 자체도 존재하지 않으며,
-- 프로시저 실행 시 넘겨주게 되는 매개변수의 종류는
-- IN(입력), OUT(출력), INOUT(입출력) 으로 구분된다.

--3. 실행(호출)
/*
EXEC[UTE] 프로시저명[(인수1, 인수2, ...)];
*/

--※ 프로시저 실습을 위한 테이블 생성은
-- 20220310_02_scott.sql 파일 참조~!!!


--○ 프로시저 생성
CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( 아이디
, 패스워드
, 이름
, 전화번호
, 주소
);
IS
BEGIN
END;


CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( V_ID      IN TBL_IDPW.ID%TYPE
, V_PW      IN TBL_IDPW.PW%TYPE
, V_NAME    IN TBL_STUDENTS.NAME%TYPE
, V_TEL     IN TBL_STUDENTS.TEL%TYPE
, V_ADDR    IN TBL_STUDENTS.ADDR%TYPE
)
IS
BEGIN
    -- TBL_IDPW 테이블에 데이터 입력()
    INSERT INTO TBL_IDPW(ID, PW)
    VALUES(V_ID, V_PW);

    -- TBL_STUDENTS 테이블에 데이터 입력
    INSERT INTO TBL_STUDENTS(ID, NAME, TEL, ADDR)
    VALUES(V_ID, V_NAME, V_TEL, V_ADDR);

    -- 커밋
    COMMIT;
END;

--※ 프로시저 실습을 위한 테이블 생성은
-- 20220310_02_scott.sql 파일 참조~!!!


--○ 데이터 입력 시 특정 항목의 데이터만 입력하면
                    ---------
--                  (학번, 이름, 국어점수, 영어점수, 수학점수)
-- 내부적으로 다른 추가항목에 대한 처리가 함께 이루어질 수 있도록 하는
                   --------
--                (총점, 평균, 등급)
-- 프로시저를 작성한다.(생성한다.)
-- 프로시저 명 : PRC_SUNGJUK_INSERT()

/*
실행 예)
EXEC PRC_SUNGJUK_INSERT(1, '최선하', 90, 80, 70);

프로시저 호출로 처리된 결과
학번   이름   국어점수   영어점수   수학점수   총점   평균   등급
1     최선하     90         80         70      240     80     B
*/
CREATE OR REPLACE PROCEDURE PRC_SUNGJUK_INSERT
    (V_HAKBUN     IN TBL_SUNGJUK.HAKBUN%TYPE
    ,V_NAME       IN TBL_SUNGJUK.NAME%TYPE
    ,V_KOR        IN TBL_SUNGJUK.KOR%TYPE
    ,V_ENG        IN TBL_SUNGJUK.ENG%TYPE
    ,V_MAT        IN TBL_SUNGJUK.MAT%TYPE
    )
IS
    -- 선언부
    -- INSERT 쿼리문 수행을 하기 위해 필요한 추가 변수 구성
    V_TOT         TBL_SUNGJUK.TOT%TYPE;
    V_AVG         TBL_SUNGJUK.AVG%TYPE;
    V_GRADE       TBL_SUNGJUK.GRADE%TYPE;
BEGIN
    -- 실행부
    V_TOT := V_KOR + V_ENG + V_MAT;
    V_AVG := TRUNC(V_TOT/3);

    IF (V_AVG >= 90) THEN V_GRADE := 'A';
    ELSIF (V_AVG >= 80) THEN V_GRADE := 'B';
    ELSIF (V_AVG >= 70) THEN V_GRADE := 'C';
    ELSIF (V_AVG >= 60) THEN V_GRADE := 'D';
    ELSE V_AVG := 'F';
    END IF;

    --INSERT 쿼리문 수행
    INSERT INTO TBL_SUNGJUK(HAKBUN, NAME, KOR, ENG, MAT, TOT, AVG, GRADE)
    VALUES(V_HAKBUN, V_NAME, V_KOR, V_ENG, V_MAT, V_TOT, V_AVG, V_GRADE);

    -- 커밋
    COMMIT;
END;
--==>>Procedure PRC_SUNGJUK_INSERT이(가) 컴파일되었습니다.

--○ TBL_SUNGJUK 테이블에서 특정 학생의 점수
-- (학번, 국어점수, 영어점수, 수학점수) 데이터 수정 시
-- 총점, 평균, 등급까지 함께 수정되는 프로시저를 생성한다.
-- 프로시저 명 : PRC_SUNGJUK_UPDATE()

/*
실행 예)
EXEC PRC_SUNGJUK_UPDATE(2, 50, 50, 50);

프로시저 호출로 처리된 결과
학번  이름  국어점수    영어점수    수학점수    총점  평균  등급
1   최선하     90          80          70      240     80    B
2   박현수     50          50          50      150     50    F
*/

CREATE OR REPLACE PROCEDURE PRC_SUNGJUK_UPDATE
    ( V_HAKBUN  IN TBL_SUNGJUK.HAKBUN%TYPE
    , V_KOR     IN TBL_SUNGJUK.KOR%TYPE
    , V_ENG     IN TBL_SUNGJUK.ENG%TYPE
    , V_MAT     IN TBL_SUNGJUK.MAT%TYPE
    )
IS
  -- UPDATE 진행 시 필요한 데이터를 담을 주요 변수 선언 
      V_TOT     TBL_SUNGJUK.TOT%TYPE;
      V_AVG     TBL_SUNGJUK.AVG%TYPE;
      V_GRADE   TBL_SUNGJUK.GRADE%TYPE;
BEGIN
  -- 아래의 쿼리문 실행을 위해서는 
  -- 선언한 변수들에 값을 담아내야 한다.
  V_TOT := V_KOR + V_ENG + V_MAT;
  V_AVG := TRUNC(V_TOT / 3); 
      IF (V_AVG>= 90) 
        THEN V_GRADE := 'A';
      ELSIF (V_AVG>=80)
        THEN V_GRADE := 'B';
      ELSIF (V_AVG>=70)
        THEN V_GRADE := 'C';
      ELSIF (V_AVG>=60)
        THEN V_GRADE := 'D';
      ELSE V_GRADE := 'F';
      END IF; 

  -- UPDATE 쿼리문 수행
  UPDATE TBL_SUNGJUK
  SET KOR = V_KOR, ENG = V_ENG, MAT = V_MAT, TOT = V_TOT, AVG = V_AVG, GRADE = V_GRADE
  WHERE HAKBUN = V_HAKBUN;

  -- 커밋
  COMMIT;

END;
--==>>Procedure PRC_SUNGJUK_UPDATE이(가) 컴파일되었습니다.



--○ TBL_STUDENTS 테이블에서 전화번호와 주소 데이터를 수정하는(변경하는)
-- 프로시저를 작성한다.
-- 단, ID 와 PW가 일치하는 경우에만 수정을 진행할 수 있도록 처리한다.
-- 프로시저 명 : PRC_STUDENTS_UPDATE()
SELECT *
FROM TBL_STUDENTS;

/
--------------------------------------------------------
--  DDL for Function FN_PAY
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SCOTT"."FN_PAY" (V_BASICPAY NUMBER, V_SUDANG NUMBER)
RETURN NUMBER
IS
    -- 주요 변수 선언
    V_RESULT    NUMBER;
BEGIN 
    -- 연산 및 처리
    V_RESULT := (NVL(V_BASICPAY,0)*12) + NVL(V_SUDANG,0);
    -- 최종 결과값 반환
    RETURN V_RESULT;
END;

/
--------------------------------------------------------
--  DDL for Function FN_POW
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SCOTT"."FN_POW" (A NUMBER,B NUMBER)  -- 매개변수 : 자릿수(길이) 지정 안함
RETURN NUMBER 
IS 
    -- 선언부 → 주요 변수 선언
    V_RESULT    NUMBER := 1;    -- 숫자
    V_NUM       NUMBER;         -- 승
BEGIN
    -- 반복문 구성
    FOR V_NUM IN 1 .. B LOOP
        V_RESULT := V_RESULT * A;
    END LOOP;

    RETURN V_RESULT;
END;

/
--------------------------------------------------------
--  DDL for Function FN_WORKYEAR
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SCOTT"."FN_WORKYEAR" (IBSADATE DATE)
RETURN NUMBER
IS
    V_RESULT    NUMBER;
BEGIN
    V_RESULT := TRUNC(((SYSDATE-IBSADATE)/365),1);
    RETURN V_RESULT;
END;

/
--------------------------------------------------------
--  Constraints for Table TBL_INSA
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_INSA" ADD CONSTRAINT "TBL_INSA_NUM_PK" PRIMARY KEY ("NUM")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "SCOTT"."TBL_INSA" MODIFY ("SUDANG" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSA" MODIFY ("BASICPAY" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSA" MODIFY ("JIKWI" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSA" MODIFY ("BUSEO" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSA" MODIFY ("IBSADATE" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSA" MODIFY ("SSN" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSA" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSA" MODIFY ("NUM" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_EMP
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_EMP" ADD CONSTRAINT "EMP_EMP_ID_PK" PRIMARY KEY ("EMP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_INSABACKUP
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_INSABACKUP" MODIFY ("SUDANG" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSABACKUP" MODIFY ("BASICPAY" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSABACKUP" MODIFY ("JIKWI" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSABACKUP" MODIFY ("BUSEO" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSABACKUP" MODIFY ("IBSADATE" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSABACKUP" MODIFY ("SSN" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSABACKUP" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_INSABACKUP" MODIFY ("NUM" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_출고
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_출고" ADD PRIMARY KEY ("상품코드")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_SUNGJUK
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_SUNGJUK" ADD CONSTRAINT "SUNGJUK_HAKBUN_PK" PRIMARY KEY ("HAKBUN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_MEMBERSCORE
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_MEMBERSCORE" ADD CONSTRAINT "MEMBERSCORE_SID_PK" PRIMARY KEY ("SID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "SCOTT"."TBL_MEMBERSCORE" ADD CONSTRAINT "MEMBERSCORE_MAT_CK" CHECK (KOR BETWEEN 0 AND 100) ENABLE;
  ALTER TABLE "SCOTT"."TBL_MEMBERSCORE" ADD CONSTRAINT "MEMBERSCORE_ENG_CK" CHECK (KOR BETWEEN 0 AND 100) ENABLE;
  ALTER TABLE "SCOTT"."TBL_MEMBERSCORE" ADD CONSTRAINT "MEMBERSCORE_KOR_CK" CHECK (KOR BETWEEN 0 AND 100) ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_TEST3
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_TEST3" ADD CONSTRAINT "TEST3_CODE_PK" PRIMARY KEY ("SID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_IDPW
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_IDPW" ADD CONSTRAINT "IDPW_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_TEST2
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_TEST2" ADD CONSTRAINT "TEST2_CODE_PK" PRIMARY KEY ("CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_상품
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_상품" ADD CONSTRAINT "상품_상품코드_PK" PRIMARY KEY ("상품코드")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_JIKWI
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_JIKWI" ADD CONSTRAINT "JIKWI_JIKWI_ID_PK" PRIMARY KEY ("JIKWI_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_TEST1
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_TEST1" ADD CONSTRAINT "TEST1_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_입고
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_입고" ADD CONSTRAINT "입고_입고번호_PK" PRIMARY KEY ("입고번호")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_STUDENTS
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_STUDENTS" ADD CONSTRAINT "STUDENTS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_BOARD
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_BOARD" ADD CONSTRAINT "BOARD_NUM_PK" PRIMARY KEY ("NUM")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "SCOTT"."TBL_BOARD" MODIFY ("CREATED" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_BOARD" MODIFY ("HITCOUNT" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_BOARD" MODIFY ("CONTENT" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_BOARD" MODIFY ("SUBJECT" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_BOARD" MODIFY ("PWD" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_BOARD" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "SCOTT"."TBL_BOARD" MODIFY ("NUM" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_BUSEO
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_BUSEO" ADD CONSTRAINT "BUSEO_BUSEO_ID_PK" PRIMARY KEY ("BUSEO_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table EMP
--------------------------------------------------------

  ALTER TABLE "SCOTT"."EMP" ADD CONSTRAINT "PK_EMP" PRIMARY KEY ("EMPNO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_CITY
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_CITY" ADD CONSTRAINT "CITY_CITY_ID_PK" PRIMARY KEY ("CITY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_MEMBER
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_MEMBER" ADD CONSTRAINT "MEMBER_SID_PK" PRIMARY KEY ("SID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "SCOTT"."TBL_MEMBER" MODIFY ("NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DEPT
--------------------------------------------------------

  ALTER TABLE "SCOTT"."DEPT" ADD CONSTRAINT "PK_DEPT" PRIMARY KEY ("DEPTNO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EMP
--------------------------------------------------------

  ALTER TABLE "SCOTT"."EMP" ADD CONSTRAINT "FK_DEPTNO" FOREIGN KEY ("DEPTNO")
	  REFERENCES "SCOTT"."DEPT" ("DEPTNO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_EMP
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_EMP" ADD CONSTRAINT "EMP_BUSEO_ID_PK" FOREIGN KEY ("BUSEO_ID")
	  REFERENCES "SCOTT"."TBL_BUSEO" ("BUSEO_ID") ENABLE;
  ALTER TABLE "SCOTT"."TBL_EMP" ADD CONSTRAINT "EMP_CITY_ID_PK" FOREIGN KEY ("CITY_ID")
	  REFERENCES "SCOTT"."TBL_CITY" ("CITY_ID") ENABLE;
  ALTER TABLE "SCOTT"."TBL_EMP" ADD CONSTRAINT "EMP_JIKWI_ID_PK" FOREIGN KEY ("JIKWI_ID")
	  REFERENCES "SCOTT"."TBL_JIKWI" ("JIKWI_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_MEMBERSCORE
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_MEMBERSCORE" ADD CONSTRAINT "MEMBERSCORE_SID_FK" FOREIGN KEY ("SID")
	  REFERENCES "SCOTT"."TBL_MEMBER" ("SID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_TEST3
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_TEST3" ADD CONSTRAINT "TEST3_CODE_FK" FOREIGN KEY ("CODE")
	  REFERENCES "SCOTT"."TBL_TEST2" ("CODE") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_입고
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_입고" ADD CONSTRAINT "입고_상품코드_FK" FOREIGN KEY ("상품코드")
	  REFERENCES "SCOTT"."TBL_상품" ("상품코드") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_출고
--------------------------------------------------------

  ALTER TABLE "SCOTT"."TBL_출고" ADD CONSTRAINT "출고_상품코드_FK" FOREIGN KEY ("상품코드")
	  REFERENCES "SCOTT"."TBL_상품" ("상품코드") ENABLE;
